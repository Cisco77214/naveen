#########################################################
#                  IK Spline Creator                   #
#-------------------------------------------------------#
# Author   : Naveen M.
# Purpose  : Select a curve, click the button, and 
#            automatically create an IK Spline.
# Created  : 
#########################################################


import maya.cmds as cmds
##### UI ######
if cmds.window('ikTool', q=True, ex=True):
    cmds.deleteUI('ikTool', window=True)

cmds.window('ikTool', t='ikSplineTool')
cmds.rowColumnLayout(nc=2, cs=[(1, 20), (2, 20)],
                     cw=[(1, 110), (2, 110)], rs=(1, 4))
cmds.text(l="Joint Amount")
jntAmountIF = cmds.intField(v=5, min=2)
cmds.text(l="No of Ctrls")
ctrlAmountIF = cmds.intField(v=5, min=2)
cmds.checkBox('Curve', l='Rebuild Curve')
cmds.checkBox('Ctrl', l='IKFK Ctrl')
cmds.button(l="Create", w=240, c="ctrlMaking()")
cmds.showWindow('ikTool')

# ------------------------------------------------------------------
# Rebuild given Curve
# ------------------------------------------------------------------
def rebuildCrv():
    spanCount = cmds.intField(ctrlAmountIF, q=True, v=True)
    curveSelected = cmds.ls(sl=True) or []

    if cmds.checkBox('Curve', q=True, v=True):
        selCurve = cmds.rebuildCurve(
            curveSelected, ch=0, rt=0, end=1, kr=0, kcp=0, kep=1,
            kt=0, s=(spanCount - 1), d=3, tol=0.01)
    else:
        selCurve = curveSelected
    return selCurve

# ------------------------------------------------------------------
# Creating Joints on given Curve
# ------------------------------------------------------------------
def createJntAlongCurve(crvSel, numField):
    count = cmds.intField(numField, q=True, v=True)
    previousJnt = ""
    rootJnt = ""
    lastJnt = ""
    jntList = []

    for i in range(count):
        cmds.select(cl=True)
        newJnt = cmds.joint()
        motionPath = cmds.pathAnimation(newJnt, c=crvSel, fractionMode=True)
        cmds.cutKey(motionPath + ".u", time=())
        cmds.setAttr(motionPath + ".u", i * (1.0 / (count - 1)))
        for ax in ('tx', 'ty', 'tz'):
            cmds.delete(newJnt + '.' + ax, icn=1)
        cmds.delete(motionPath)
        jntList.append(newJnt)

        if i == 0:
            rootJnt = newJnt
            previousJnt = newJnt
            continue
        if i == (count - 1):
            lastJnt = newJnt

        cmds.parent(newJnt, previousJnt)
        previousJnt = newJnt

    cmds.joint(rootJnt, e=True, oj="xyz", sao='yup', ch=True, zso=True)
    for ax in 'XYZ':
        cmds.setAttr(lastJnt + ".jointOrient" + ax, 0)
    return rootJnt, lastJnt, jntList

# ------------------------------------------------------------------
# Creating IKSplineHandle
# ------------------------------------------------------------------
def createIkSpline():
    crvRes = rebuildCrv()[0]
    rootSknJnt, lastSknJnt, jntList = createJntAlongCurve(crvRes, jntAmountIF)

    cmds.select(rootSknJnt, lastSknJnt, crvRes)
    cmds.ikHandle(sol="ikSplineSolver", createCurve=0, simplifyCurve=0,
                  parentCurve=0, n="ikHandle")
    cmds.setAttr("ikHandle.v", 0)

    ikHndleGrp = cmds.group(em=True, n="ikHandle_Gp")
    cmds.parent("ikHandle", ikHndleGrp)
    cmds.parent(crvRes, ikHndleGrp)
    if cmds.objExists('Deformation_Gp'):
        cmds.parent(ikHndleGrp, 'Deformation_Gp')

    sknJnt = []
    for idx, j in enumerate(jntList):
        sknJnt.append(cmds.rename(j, "{}_{}_Skn_Jnt".format(crvRes, idx)))

    return crvRes, sknJnt[0], sknJnt

# ------------------------------------------------------------------
# Creating controls
# ------------------------------------------------------------------
def ctrlMaking():
    res = createIkSpline()
    crvName, rootSknJnt, sknJnt = res

    ctrlRes = createJntAlongCurve(crvName, ctrlAmountIF)
    ikJnt = ["{}_{}_Jnt".format(crvName, i) for i, j in enumerate(ctrlRes[2])]
    for old, new in zip(ctrlRes[2], ikJnt):
        cmds.rename(old, new)

    grp = cmds.group(em=True, n=crvName + "_Ctrl_Gp")
    ikCtrlGp = []
    ikCtrl = []

    for each in ikJnt:
        ctrl = cmds.circle(nr=[1, 0, 0], ch=0, n=each + "_Ik_Ctrl")[0]
        ctrlGrp = cmds.group(em=True, n=each + "_Ik_Ctrl_Gp")
        cmds.parent(ctrl, ctrlGrp)
        cmds.delete(cmds.parentConstraint(each, ctrlGrp, mo=0))
        cmds.parent(each, ctrl)
        cmds.parent(ctrlGrp, grp)
        cmds.setAttr(each + ".drawStyle", 2)
        ikCtrlGp.append(ctrlGrp)
        ikCtrl.append(ctrl)
        if cmds.objExists('controls_set'):
            cmds.sets(ctrl, add='controls_set')

    cmds.skinCluster(ikJnt, crvName, tsb=True)

    # main control
    mainCtrl = cmds.curve(
        d=1,
        p=[(0, 0.75, -0.75), (0, 0.75, 0.75), (0, -0.75, 0.75),
           (0, -0.75, -0.75), (0, 0.75, -0.75)],
        k=[0, 1, 2, 3, 4],
        n=crvName + "_Main_Ctrl")
    mainCtrlGrp = cmds.group(em=True, n=crvName + "_Main_Ctrl_Gp")
    cmds.parent(mainCtrl, mainCtrlGrp)
    cmds.delete(cmds.parentConstraint(rootSknJnt, mainCtrlGrp, mo=0))
    cmds.parent(crvName + "_Ctrl_Gp", mainCtrl)
    cmds.select(mainCtrl + ".cv[0:4]")
    cmds.scale(2.5, 2.5, 2.5)
    cmds.select(cl=True)

    cmds.addAttr(mainCtrl, ln="Stretch", at="double", min=0, max=1, dv=0, k=True)
    cmds.setAttr(mainCtrl + ".Stretch", 1)
    cmds.addAttr(mainCtrl, ln="IK_Ctrl_Vis", at="enum", en="Off:On:", k=True)
    cmds.setAttr(mainCtrl + ".IK_Ctrl_Vis", 1)
    if cmds.objExists('Secondary_Controls_Gp'):
        cmds.parent(mainCtrlGrp, 'Secondary_Controls_Gp')

    # FK duplicates
    fkGrp = []
    fkCtrl = []

    if cmds.checkBox('Ctrl', q=True, v=True):
        ikDup = cmds.duplicate(ikCtrlGp, rc=True)
        for each in ikDup:
            if "Ik_Ctrl_Gp1" in each:
                fkGrp.append(cmds.rename(each, each.replace("Ik_Ctrl_Gp1", "Fk_Ctrl_Gp")))
            elif "Ik_Ctrl1" in each:
                fkCtrl.append(cmds.rename(each, each.replace("Ik_Ctrl1", "Fk_Ctrl")))
            else:
                cmds.delete(each)

        cmds.addAttr(mainCtrl, ln="FK_Ctrl_Vis", at="enum", en="Off:On:", k=True)
        cmds.setAttr(mainCtrl + ".FK_Ctrl_Vis", 1)
        for fkc in fkCtrl:
            cmds.connectAttr(mainCtrl + ".FK_Ctrl_Vis", fkc + "Shape.visibility")
            if cmds.objExists('controls_set'):
                cmds.sets(fkc, add='controls_set')

        # FK chain parenting
        for i in range(len(fkGrp) - 1):
            cmds.parent(fkGrp[i + 1], fkCtrl[i])

        # IK under FK
        for j in range(len(fkCtrl)):
            cmds.parent(ikCtrlGp[j], fkCtrl[j])

    # main control cosmetics
    mainShape = cmds.listRelatives(mainCtrl, c=True, type='nurbsCurve')[0]
    mainShape = cmds.rename(mainShape, mainCtrl + "Shape")
    cmds.setAttr(mainShape + ".overrideEnabled", 1)
    cmds.setAttr(mainShape + ".overrideColor", 17)
    cmds.parent(rootSknJnt, mainCtrl)
    cmds.setAttr(mainCtrl + ".v", l=True, k=False, cb=False)
    if cmds.objExists('controls_set'):
        cmds.sets(mainCtrl, add='controls_set')
    if cmds.objExists('Master_Ctrl'):
        for ax in 'xyz':
            cmds.setAttr(mainCtrl + ".s" + ax, l=True, k=False, cb=False)

    # IK cube shape
    cube_pts = [(0.75, 0.75, 0.75), (0.75, 0.75, -0.75), (-0.75, 0.75, -0.75),
                (-0.75, 0.75, 0.75), (0.75, 0.75, 0.75), (0.75, -0.75, 0.75),
                (0.75, -0.75, -0.75), (0.75, 0.75, -0.75), (-0.75, 0.75, -0.75),
                (-0.75, -0.75, -0.75), (0.75, -0.75, -0.75), (-0.75, -0.75, -0.75),
                (-0.75, -0.75, 0.75), (-0.75, 0.75, 0.75), (-0.75, -0.75, 0.75),
                (0.75, -0.75, 0.75)]

    for ctrl in ikCtrl:
        cube = cmds.curve(d=1, p=cube_pts, k=list(range(16)))
        cubeShape = cmds.listRelatives(cube, c=True)[0]
        ctrlShape = cmds.listRelatives(ctrl, c=True)[0]
        cmds.parent(cubeShape, ctrl, r=True, s=True)
        cmds.delete(ctrlShape)
        cmds.delete(cube)
        cmds.rename(cubeShape, ctrlShape)

        cmds.select(ctrl + ".cv[0:15]")
        cmds.scale(0.2, 0.8, 0.8)
        cmds.select(cl=True)
        cmds.setAttr(ctrl + ".overrideEnabled", 1)
        cmds.setAttr(ctrl + ".overrideColor", 18)
        cmds.connectAttr(mainCtrl + ".IK_Ctrl_Vis", ctrl + "Shape.visibility")
        newName = ctrl.replace("_Jnt", "")
        cmds.rename(ctrl, newName)
        for ax in 'xyz':
            for tr in 'trs':
                cmds.setAttr(newName + "." + tr + ax, l=False, k=True, cb=False)
        cmds.setAttr(newName + ".v", l=False, k=True, cb=False)

    # FK cosmetics
    for fkc in fkCtrl:
        cmds.setAttr(fkc + ".overrideEnabled", 1)
        cmds.setAttr(fkc + ".overrideColor", 6)
        newName = fkc.replace("_Jnt", "")
        cmds.rename(fkc, newName)
        for ax in 'xyz':
            for tr in 'ts':
                cmds.setAttr(newName + "." + tr + ax, l=False, k=True, cb=False)
        cmds.setAttr(newName + ".v", l=False, k=True, cb=False)

    # rename groups
    for grp in ikCtrlGp:
        cmds.rename(grp, grp.replace("_Jnt", ""))
    for grp in fkGrp:
        cmds.rename(grp, grp.replace("_Jnt", ""))

    # Stretch network
    cmds.select(crvName)
    crvInfo = cmds.arclen(crvName, ch=True)
    arclenVal = cmds.getAttr(crvInfo + ".arcLength")

    scaleMdn = cmds.createNode('multiplyDivide', n=crvName + "_Scale_Mdn")
    stretchMdn = cmds.createNode('multiplyDivide', n=crvName + "_Stretch_Mdn")
    cmds.setAttr(stretchMdn + ".operation", 2)
    stretchBc = cmds.createNode('blendColors', n=crvName + "_Stretch_Bc")
    cmds.setAttr(stretchBc + ".color2R", 1)

    cmds.setAttr(scaleMdn + ".input1X", arclenVal)
    if cmds.objExists('Master_Ctrl'):
        cmds.connectAttr("Master_Ctrl.GlobalScale", scaleMdn + ".input2X")
    else:
        cmds.connectAttr(mainCtrl + ".scaleX", scaleMdn + ".input2X")

    cmds.connectAttr(crvInfo + ".arcLength", stretchMdn + ".input1X")
    cmds.connectAttr(scaleMdn + ".outputX", stretchMdn + ".input2X")
    cmds.connectAttr(mainCtrl + ".Stretch", stretchBc + ".blender")
    cmds.connectAttr(stretchMdn + ".outputX", stretchBc + ".color1R")

    for jnt in sknJnt:
        jntMdn = cmds.createNode('multiplyDivide', n=jnt + "_Mdn")
        txVal = cmds.getAttr(jnt + ".translateX")
        cmds.setAttr(jntMdn + ".input1X", txVal)
        cmds.connectAttr(stretchBc + ".outputR", jntMdn + ".input2X")
        cmds.connectAttr(jntMdn + ".outputX", jnt + ".translateX")
