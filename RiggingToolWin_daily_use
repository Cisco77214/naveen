global proc RiggingTool_UI()
{
 if(`window -ex RiggingToolWin`)
    deleteUI RiggingToolWin;
    if(`windowPref -q -exists RiggingToolWin`)
    windowPref -remove RiggingToolWin;
    
    string $win = `window -h 130 -w 280 -mxb 0 -t "RIGGING-TOOLS" RiggingToolWin`;
    string $f1 = `formLayout -bgc .0 .0 .0`;
    string $bt1 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "CreateSet" -l "Set"`;
    string $bt2 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "CenterPivot" -l "CP"`;
    string $bt3 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "FreezeTransformations" -l "FT"`;
    string $bt4 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "JdsWin" -l "JointSiz"`;
    string $bt5 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "DeleteHistory" -l "History"`;
    string $bt6 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "HypergraphDGWindow" -l "Hypergraph"`;
    string $bt7 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "NodeEditorWindow" -l "NodeEdit"`;
    string $bt8 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "ConnectionEditor" -l "ConEdit"`;
    string $bt9 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "ComponentEditor" -l "CompEdit"`;
    string $bt10 = `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "OutlinerWindow" -l "Otlr"`;
    string $bt11= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "Joint" -l "Joint"`;
    string $bt12= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "cometRename" -l "ComRename"`;
    string $bt13= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "cometJointOrient" -l "ComOrient"`;
    string $bt14= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "MirrorJointOptions" -l "MirrJnt"`;
    string $bt15= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "redefineController" -l "Ctrlkit"`;
    string $bt16= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "SmoothBindSkin" -l "BindSk"`;
    string $bt17= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "DetachSkin" -l "UnBindSK"`;
    string $bt18= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "ArtPaintSkinWeightsTool" -l "PaintSk"`;
    string $bt19= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "MirrorSkinWeights" -l "MirrSk"`;
    string $bt20= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "WeightHammer" -l "Hammer"`;
    string $bt21= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "qa_skinManagerUI" -l "SM"`;
    string $bt22= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "CopySkinWeights" -l "CopySkin"`;
    string $bt23= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "AddInfluence" -l "AddInflu"`;
    string $bt24= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "ParentCon" -l "ParentCon"`;
    string $bt25= `button -w 50 -h 20 -bgc 0.10 0.5 0.5 -c "rCreateFollicleProc" -l "Folicle"`;
    
    
    formLayout -edit
                        -af $bt1 "top" 5
                        -af $bt2 "top" 5
                        -af $bt3 "top" 5
                        -af $bt4 "top" 5
                        -af $bt5 "top" 5
                        -af $bt6 "top" 30
                        -af $bt7 "top" 30
                        -af $bt8 "top" 30
                        -af $bt9 "top" 30
                        -af $bt10 "top" 30
                        -af $bt11 "top" 55
                        -af $bt12 "top" 55
                        -af $bt13 "top" 55
                        -af $bt14 "top" 55
                        -af $bt15 "top" 55
                        -af $bt16 "top" 80
                        -af $bt17 "top" 80
                        -af $bt18 "top" 80
                        -af $bt19 "top" 80
                        -af $bt20 "top" 80
                        -af $bt21 "top" 105
                        -af $bt22 "top" 105
                        -af $bt23 "top" 105
                        -af $bt24 "top" 105
                        -af $bt25 "top" 105
                        
                        
                        -af $bt1 "left" 5
                        -af $bt2 "left" 60
                        -af $bt3 "left" 115
                        -af $bt4 "left" 170
                        -af $bt5 "left" 225
                        -af $bt6 "left" 5
                        -af $bt7 "left" 60
                        -af $bt8 "left" 115
                        -af $bt9 "left" 170
                        -af $bt10 "left" 225
                        -af $bt11 "left" 5
                        -af $bt12 "left" 60
                        -af $bt13 "left" 115
                        -af $bt14 "left" 170
                        -af $bt15 "left" 225
                        -af $bt16 "left" 5
                        -af $bt17 "left" 60
                        -af $bt18 "left" 115
                        -af $bt19 "left" 170
                        -af $bt20 "left" 225
                        -af $bt21 "left" 5
                        -af $bt22 "left" 60
                        -af $bt23 "left" 115
                        -af $bt24 "left" 170
                        -af $bt25 "left" 225
                        
                        $f1;
                      showWindow $win;  
}RiggingTool_UI;


// --------------------------------------------------------------------------
// cometJointOrient.mel - MEL Script
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------

global string $cJO_version = "1.03" ;
global string $cJO_date = "Apr 10, 2004" ;

// --------------------------------------------------------------------------

/*
 * cometJointOrient() - Main UI entry.
 */
global proc cometJointOrient()
{
    global string $cJO_version ;
    global string $cJO_date ;

    if (`window -ex cometJointOrientWin` != true)
        {
	window -w 310 -h 256 -t ("cometJointOrient - "+$cJO_version) -in "cometJointOrient" -s true -tb true cometJointOrientWin;
	
	formLayout mainForm ;

	separator -style "in" -h 3 sep0 ;

	button -l "Show Axis" -h 18 -al "center" -c ("toggle -state on -localAxis; ") -ann ("Show Local Axis") btnShow ;
	button -l "Hide Axis" -h 18 -al "center" -c ("toggle -state off -localAxis; ") -ann ("Hide Local Axis") btnHide ;

	radioButtonGrp -l "Aim Axis:" -nrb 3 -la3 "X" "Y" "Z" -sl 2 -cw4 80 40 40 40 rbgAim ;
	radioButtonGrp -l "Up  Axis:" -nrb 3 -la3 "X" "Y" "Z" -sl 1 -cw4 80 40 40 40 rbgUp ;
	
	checkBox -l "Reverse" -v 0 cbRevAim ;
	checkBox -l "Reverse" -v 0 cbRevUp ;
	
	separator -style "in" -h 3 sep1 ;
	
	floatFieldGrp -nf 3 -label "World Up Dir:" -v1 1.0 -v2 0.0 -v3 0.0 -cw4 80 50 50 50 ffgUpDir ;
	button -l "X" -w 20 -c ("floatFieldGrp -e -v1 1.0 -v2 0.0 -v3 0.0 ffgUpDir; ") -ann ("Auto Set UpDir to X-Axis") btnX ;
	button -l "Y" -w 20 -c ("floatFieldGrp -e -v1 0.0 -v2 1.0 -v3 0.0 ffgUpDir; ") -ann ("Auto Set UpDir to Y-Axis") btnY ;
	button -l "Z" -w 20 -c ("floatFieldGrp -e -v1 0.0 -v2 0.0 -v3 1.0 ffgUpDir; ") -ann ("Auto Set UpDir to Z-Axis") btnZ ;
	
	checkBox -l "Auto-Guess Up Direction" -v 0 cbAutoDir ;

	button -l "Orient Joints" -al "center" -c ("cJO_orientUI();") -ann ("Orient selected joints based on settings above.") btnOJ;
	
	
	separator -style "double" -h 7 sepBig ;
	
	floatFieldGrp -nf 3 -label "Tweak:" -v1 0.0 -v2 0.0 -v3 0.0 -cw4 80 50 50 50 ffgTweak ;
	button -l "ZERO" -w 40 -c ("floatFieldGrp -e -v1 0.0 -v2 0.0 -v3 0.0 ffgTweak; ") -ann ("Zero's tweak values.") btnZero ;
	
	popupMenu -p ffgTweak ;
	    menuItem -l "X=1" -c ("floatFieldGrp -e -v1 1.0 ffgTweak ; ") ;
	    menuItem -l "Y=1" -c ("floatFieldGrp -e -v2 1.0 ffgTweak ; ") ;
	    menuItem -l "Z=1" -c ("floatFieldGrp -e -v3 1.0 ffgTweak ; ") ;
	    menuItem -divider true ;
	    menuItem -l "X=5" -c ("floatFieldGrp -e -v1 5.0 ffgTweak ; ") ;
	    menuItem -l "Y=5" -c ("floatFieldGrp -e -v2 5.0 ffgTweak ; ") ;
	    menuItem -l "Z=5" -c ("floatFieldGrp -e -v3 5.0 ffgTweak ; ") ;
	    menuItem -divider true ;
	    menuItem -l "X=10" -c ("floatFieldGrp -e -v1 10.0 ffgTweak ; ") ;
	    menuItem -l "Y=10" -c ("floatFieldGrp -e -v2 10.0 ffgTweak ; ") ;
	    menuItem -l "Z=10" -c ("floatFieldGrp -e -v3 10.0 ffgTweak ; ") ;
	

	button -l "Manual + Rot Tweak" -al "center" -c ("cJO_tweakUI(1.0);") -ann ("Manually rotates selected joints axis positive.") btnTweakP ;
	button -l "Manual - Rot Tweak" -al "center" -c ("cJO_tweakUI(-1.0);") -ann ("Manually rotates selected joints axis negative.") btnTweakN ;

	separator -style "in" -h 3 sep2 ;

	iconTextButton -style "textOnly" -l ("comet@comet-cartoons.com") -ann ("cometJointOrient - "+$cJO_version+" - "+$cJO_date+"  Copyright ?2004 Michael B. Comet All Rights Reserved") -c ("showHelp -a \"http://www.comet-cartoons.com/toons/\"") -h 24 email ;
	
	formLayout -e
	    -af sep0 "left" 0 
	    -af sep0 "right" 0
	    -af sep0 "top" 0
	    -an sep0 "bottom"

	    -af btnShow "left" 0
	    -ap btnShow "right" 0 50
	    -ac btnShow "top" 0 sep0
	    -an btnShow "bottom"

	    -ap btnHide "left" 0 50
	    -af btnHide "right" 0
	    -ac btnHide "top" 0 sep0
	    -an btnHide "bottom"


	    -af rbgAim "left" 0 
	    -an rbgAim "right" 
	    -ac rbgAim "top" 0 btnShow
	    -an rbgAim "bottom"
	    
		-ac cbRevAim "left" 0 rbgAim
		-af cbRevAim "right" 0
		-ac cbRevAim "top" 0 btnShow
		-an cbRevAim "bottom"
		
	
	    -af rbgUp "left" 0 
	    -an rbgUp "right" 
	    -ac rbgUp "top" 0 rbgAim
	    -an rbgUp "bottom"

		-ac cbRevUp "left" 0 rbgUp
		-af cbRevUp "right" 0
		-ac cbRevUp "top" 0 rbgAim
		-an cbRevUp "bottom"
	
	    -af sep1 "left" 0 
	    -af sep1 "right" 0
	    -ac sep1 "top" 0 rbgUp
	    -an sep1 "bottom"

	    -af ffgUpDir "left" 0 
	    -an ffgUpDir "right" 
	    -ac ffgUpDir "top" 0 sep1
	    -an ffgUpDir "bottom"	    

		-ac btnX "left" 2 ffgUpDir 
		-an btnX "right" 
		-ac btnX "top" 0 sep1
		-an btnX "bottom"	    

		-ac btnY "left" 2 btnX 
		-an btnY "right" 
		-ac btnY "top" 0 sep1
		-an btnY "bottom"	    

		-ac btnZ "left" 2 btnY 
		-an btnZ "right"
		-ac btnZ "top" 0 sep1
		-an btnZ "bottom"	    

	    -af cbAutoDir "left" 20 
	    -af cbAutoDir "right" 0
	    -ac cbAutoDir "top" 0 ffgUpDir
	    -an cbAutoDir "bottom"	    

	    -af btnOJ "left" 5 
	    -af btnOJ "right" 5
	    -ac btnOJ "top" 5 cbAutoDir
	    -an btnOJ "bottom"	

	    -af sepBig "left" 0
	    -af sepBig "right" 0
	    -ac sepBig "top" 5 btnOJ
	    -an sepBig "bottom"	

	    -af ffgTweak "left" 0
	    -an ffgTweak "right" 
	    -ac ffgTweak "top" 5 sepBig
	    -an ffgTweak "bottom"	

		-ac btnZero "left" 2 ffgTweak 
		-an btnZero "right" 
		-ac btnZero "top" 5 sepBig
		-an btnZero "bottom"	    

	    -af btnTweakP "left" 5
	    -ap btnTweakP "right" 0 49
	    -ac btnTweakP "top" 5 ffgTweak
	    -an btnTweakP "bottom"	

	    -ap btnTweakN "left" 0 51
	    -af btnTweakN "right" 5
	    -ac btnTweakN "top" 5 ffgTweak
	    -an btnTweakN "bottom"	

	    -af sep2 "left" 5
	    -af sep2 "right" 5
	    -ac sep2 "top" 5 btnTweakP
	    -an sep2 "bottom"	

	    -af email "left" 0 
	    -af email "right" 0
	    -ac email "top" 0 sep2
	    -an email "bottom" 
	
	    mainForm ;


	showWindow cometJointOrientWin;
	}
    else	// else just pop it up from being minimized again
    	{
	showWindow cometJointOrientWin;
	}

}


// --------------------------------------------------------------------------

/*
 * cJO_orientUI() - UI wrapper for starting an orient
 */
global proc cJO_orientUI()
{
    print ("// cometJointOrient\n"); 

    int $nAimAxis = `radioButtonGrp -q -sl rbgAim` ;
    int $nUpAxis = `radioButtonGrp -q -sl rbgUp` ;
    float $aimAxis[] = {0,0,0} ;
    float $upAxis[] = {0,0,0} ;
    
    float $revAim = 1.0 ;
    if (`checkBox -q -v cbRevAim`)
        $revAim = -1.0 ;
    
    float $revUp = 1.0 ;
    if (`checkBox -q -v cbRevUp`)
        $revUp = -1.0 ;
    
    if ($nAimAxis == $nUpAxis)
       warning -sl 0 ("The AIM and UP axis are the same! Orientaiton probably won't work!") ;
   
    $aimAxis[ ($nAimAxis-1) ] = $revAim ;
    $upAxis[ ($nUpAxis-1) ] = $revUp ;
    	
    float $upDir[3] ;
    $upDir[0] = `floatFieldGrp -q -v1 ffgUpDir` ;
    $upDir[1] = `floatFieldGrp -q -v2 ffgUpDir` ;
    $upDir[2] = `floatFieldGrp -q -v3 ffgUpDir` ;

    int $doAuto = `checkBox -q -v cbAutoDir` ;

    string $joints[] = `ls -type "joint" -sl` ;
    
    // Now do it!
    cJO_orient($joints, $aimAxis, $upAxis, $upDir, $doAuto) ;

    // End with same stuff selected!
    select -r $joints ;
    

}


// --------------------------------------------------------------------------

/*
 * cJO_orient() - The real worker orient proc.
 *
 *	$joints is array of joints to orient
 *	$aimAxis = is xyz array of what axis of joint does aim
 *	$upAxis = is xyz array of what axis of joint does up
 *	$upDir = what vector to use for up direction?
 *	$doAuto = If possible will try to guess the up axis otherwise
 *		it will use prev joint up axis or else world upDir.
 *	
 */
global proc cJO_orient(string $joints[], float $aimAxis[], float $upAxis[], 
		float $upDir[], int $doAuto)
{

    int $nJnt = size($joints) ;
    int $i;
    
    vector $prevUp = <<0,0,0>>;
    
    	// Now orient each joint
    for ($i=0; $i < $nJnt; ++$i)
        {
        
	// First we need to unparent everything and then store that,
	string $childs[] = `listRelatives -children -type "transform" -type "joint" $joints[$i]` ;
	if (size($childs) > 0)
	    $childs = `parent -w $childs` ;		// unparent and get NEW names in case they changed...
	
	// Find parent for later in case we need it.
	string $parents[] = `listRelatives -parent $joints[$i]` ;
	string $parent = $parents[0] ;
	
	
	// Now if we have a child joint...aim to that.
	string $aimTgt="" ;
	string $child ;
	for ($child in $childs)
	    {
	    if (nodeType($child) == "joint")
	        {
	        $aimTgt = $child ;
	        break ;
	        }
	    }
	    
//	print ("// DEBUG: JNT="+$joints[$i]+" Parent="+$parent+" AimTgt="+$aimTgt+" //\n") ;
	    
	
	if ($aimTgt != "")
	    {
	    float $upVec[3] = {0,0,0} ;
	    
	    // First off...if $doAuto is on, we need to guess the cross axis dir.
	    //
	    if ($doAuto)
	    	{
	    	// Now since the first joint we want to match the second orientation
	    	// we kind of hack the things passed in if it is the first joint
	    	// ie: If the joint doesn't have a parent...OR if the parent it has
	    	// has the "same" position as itself...then we use the "next" joints
	    	// as the up cross calculations
	    	//
		float $posJ[3] = `xform -q -ws -rp $joints[$i]` ;
		float $posP[3] = $posJ ;
		if ($parent != "")
		    $posP = `xform -q -ws -rp $parent` ;

		float $tol = 0.0001 ;	// How close to we consider "same"?
		
	    	if ($parent == "" || (abs($posJ[0] - $posP[0]) <= $tol && abs($posJ[1] - $posP[1]) <= $tol && abs($posJ[2] - $posP[2]) <= $tol ))
	    	    {
	    	    string $aimChilds[] = `listRelatives -children $aimTgt` ;
		    string $aimChild = "" ;
		    string $child ;
		    for ($child in $aimChilds)
			{
			if (nodeType($child) == "joint")
			    {
			    $aimChild = $child ;
			    break ;
			    }
			}    
	    	    $upVec = cJO_getCrossDir($joints[$i], $aimTgt, $aimChild) ;
	    	    }
		else
	    	    $upVec = cJO_getCrossDir($parent, $joints[$i], $aimTgt) ;
		}
		
	    if (!$doAuto || ($upVec[0] == 0.0 && $upVec[1] == 0.0 && $upVec[2] == 0.0))
		$upVec = $upDir ;	// or else use user set up Dir. if needed
	    

	    string $aCons[] = `aimConstraint 
	    	-aim $aimAxis[0] $aimAxis[1] $aimAxis[2] 
	    	-upVector $upAxis[0] $upAxis[1] $upAxis[2] 
	    	-worldUpVector $upVec[0] $upVec[1] $upVec[2] 
	    	-worldUpType "vector"
	    	-weight 1.0
	    	$aimTgt 
	    	$joints[$i]` ;
	    
	    delete $aCons ;
	    
	    
	    
	    // Now compare the up we used to the prev one.
	    vector $curUp = << $upVec[0], $upVec[1], $upVec[2] >> ;
	    $curUp = unit($curUp) ;
	    float $dot = $curUp * $prevUp ; 	// dot product for angle betwen...
	    $prevUp = << $upVec[0], $upVec[1], $upVec[2] >> ; // store for later

	    if ($i > 0 && $dot <= 0.0)
	        {
	        // Adjust the rotation axis 180 if it looks like we've flopped the wrong way!
		xform -r -os -ra ($aimAxis[0]*180.0) ($aimAxis[1]*180.0) ($aimAxis[2]*180.0) $joints[$i] ;
	    	$prevUp *= -1.0 ;
	        }


	    // And now finish clearing out joint axis...
	    joint -e -zso $joints[$i] ;
	    makeIdentity -apply true $joints[$i] ;


	    }
	else if ($parent != "")
	    {
	    // Otherwise if there is no target, just dup orienation of parent...
	    string $oCons[] = `orientConstraint 
	    	-weight 1.0
	    	$parent 
	    	$joints[$i]` ;
	    
	    delete $oCons ;
	    
	    // And now finish clearing out joint axis...
	    joint -e -zso $joints[$i] ;
	    makeIdentity -apply true $joints[$i] ;
	    }
	
	// Now that we're done... reparent
	if (size($childs) > 0)
	    parent $childs $joints[$i] ;
        }

}

// --------------------------------------------------------------------------

/*
 * cJO_getCrossDir() - Given three nodes, this gets the cross product of 
 *	the directions from B->A and B->C.
 */
global proc float[] cJO_getCrossDir(string $objA, string $objB, string $objC)
{
    float $cross[3] = {0,0,0} ;
    
    if ($objA == "" || $objB == "" || $objC == "" ||
    	objExists($objA) != true || objExists($objB) != true || objExists($objC) != true)
    	return $cross ;

    float $posA[3] = `xform -q -ws -rp $objA` ;
    float $posB[3] = `xform -q -ws -rp $objB` ;
    float $posC[3] = `xform -q -ws -rp $objC` ;
    	
    vector $v1 = << $posA[0]-$posB[0], $posA[1]-$posB[1], $posA[2]-$posB[2] >> ;
    vector $v2 = << $posC[0]-$posB[0], $posC[1]-$posB[1], $posC[2]-$posB[2] >> ;

    vector $vC = $v1 ^ $v2 ;	// Do cross product!
    $vC = unit($vC) ;		// normalize
    
    $cross[0] = $vC.x ;
    $cross[1] = $vC.y ;
    $cross[2] = $vC.z ;
    
    return $cross ;
}

// --------------------------------------------------------------------------



/*
 * cJO_tweakUI() - UI wrapper for starting a joint tweak
 */
global proc cJO_tweakUI(float $mult)
{
    float $rot[3] ;
    $rot[0] = `floatFieldGrp -q -v1 ffgTweak` * $mult ;
    $rot[1] = `floatFieldGrp -q -v2 ffgTweak` * $mult ;
    $rot[2] = `floatFieldGrp -q -v3 ffgTweak` * $mult ;
    
    string $joints[] = `ls -type "joint" -sl` ;
    
    // Now do it!
    cJO_tweak($joints, $rot) ;

    // End with same stuff selected!
    select -r $joints ;

}

// --------------------------------------------------------------------------

/*
 * cJO_tweak() - Tweaks the rotation of a joint the amount specified
 *
 *	$joints is array of joints to orient
 *	$rot = is xyz array of how much to rotate
 *	
 */
global proc cJO_tweak(string $joints[], float $rot[])
{
    int $nJnt = size($joints) ;
    int $i;

    	// Now tweak each joint
    for ($i=0; $i < $nJnt; ++$i)
        {
	// Adjust the rotation axis
	xform -r -os -ra $rot[0] $rot[1] $rot[2] $joints[$i] ;

 	// And now finish clearing out joint axis...
	joint -e -zso $joints[$i] ;
	makeIdentity -apply true $joints[$i] ;
	}
}

// --------------------------------------------------------------------------

// --------------------------------------------------------------------------
// cometRename.mel - MEL Script
// --------------------------------------------------------------------------

// --------------------------------------------------------------------------


/*
 * stringReplace() - Given a main string str, looks for ALL occurances
 *	of $search, and replaces them with $replace.
 *
 *	This properly handles the replace string being similar or a part
 *	of the search string, and handling multiple matches.
 */
proc string stringReplace(string $str, string $search, string $replace)
{
    string $retstr = "";

    	// Sanity check please!
    if ($search == "")
        return $str;
    
    if ($str == "")
        return $str;
        
        
    int $len = size($str);
    int $lenS = size($search);
    
    int $i, $j;
    int $match;
    
    for ($i=1; $i <= $len; ++$i)
        {
	$match = 0;

	// Now get substring from where we are currently
	// to the number of letters past of the length
	// of the search string.  Basically the same
	// length as the search string.  So if it is identical
	// we know we have a match.
	//
	// If not, we don't.  We also make sure we aren't
	// trying to look past the end of the string...
	//
	$j = $i + ($lenS - 1);

	if ($j <= $len)
	    {
	    string $part = `substring $str $i $j`;
	    if ($part == $search)
	        $match = 1;
	    }
	
	if ($match == 1)
	    {
	    $retstr += $replace; // we did it, so insert replace str
	    $i = $j;	// skip forward
	    }
	else
	    {
	    string $char = `substring $str $i $i`;
	    $retstr += $char;
	    }
	}

    return $retstr;
	
}

// --------------------------------------------------------------------------

/*
 * getShortName() - Given a string, get last part after last | pipe.
 */
proc string getShortName(string $obj)
{
    string $ret = "";
    
    if ($obj == "")
        return $ret;
        
    string $parts[];
    int $cnt = tokenize($obj, "|", $parts);
    
    if ($cnt <= 0)
        $ret = $obj;
    else
        $ret = $parts[($cnt-1)];
    
    return $ret;
}

// --------------------------------------------------------------------------

/*
 * chop() - Removes last char
 */
proc string chop(string $str)
{
    string $ret = "";

    int $cnt = size($str);
    
    if ($cnt <= 1)
        return $ret;
    
    $ret = `substring $str 1 ($cnt-1)`;

    return $ret;
}

// --------------------------------------------------------------------------

/*
 * cR_doRename() - Does real work of renaming selected objects
 *
 *    $mode:  0=S&R 1=Pre 2=Suf 3=R&N
 */
global proc cR_doRename(int $mode)
{
    string $objs[] = `ls -sl -long`;
    int $objCnt = size($objs);
    int $i;

	// Get all UI data...
	//
    string $search = `textField -q -tx tfSearch`;
    string $replace = `textField -q -tx tfReplace`;
    string $prefix = `textField -q -tx tfPrefix`;
    string $suffix = `textField -q -tx tfSuffix`;
    string $rename = `textField -q -tx tfRename`;
    int $start = `intField -q -v ifNumber`;
    int $padding = `intField -q -v ifPadding`;
    
    string $shortName;
    string $newShortName;
    string $newName;

	// Now do it
	//
    for ($i=0; $i < $objCnt; ++$i)
        {
	$obj = $objs[$i];
	
	$shortName = getShortName($obj);
		
	switch ($mode)
	    {
	    case 0:
	        if ($search == "")
	            {
	            warning -sl 0 ("Can't search and replace, search entry field is blank!");
	            return;
	            }
	        $newShortName = stringReplace($shortName, $search, $replace);
	        break;

	    case 1:
	        if ($prefix == "")
	            {
	            warning -sl 0 ("Can't add prefix, prefix entry field is blank!");
	            return;
	    	    }
	        $newShortName = ($prefix + $shortName);
	        break;

	    case 2:
	        if ($suffix == "")
	            {
	            warning -sl 0 ("Can't add suffix, suffix entry field is blank!");
	            return;
	    	    }
	        $newShortName = ($shortName + $suffix);
	        break;

	    case 3:
	        if ($rename == "")
	            {
	            warning -sl 0 ("Can't rename and number, rename entry field is blank!");
	            return;
	            }
	    		// get index of string as user wants
	    	int $n = $i + $start;
	    		// pad of 0's
	    	string $padStr = "";
	    	
	    		// Add padding as needed
	    	for ($p=1; $p < $padding; ++$p)
	    	    {
		    if ($n < pow(10, $p) )
		        $padStr += "0";
		    }
	    	
	    	$newShortName = ($rename+$padStr+$n);
	        break;

	    } // end of switch
		
	
	$newName = `rename $obj $newShortName`;
	select -r $newName;
	string $newLongNames[] = `ls -sl -long`;
	string $newLongName = $newLongNames[0];
	
	    // Now update rest of stuff in list in case |long|names
	    // required it
	for ($j=0; $j < $objCnt; ++$j)
	    {
	    string $tmp = $objs[$j];

	    $tmp += "|";	// add to end for easy replacing
	    $tmp = `substitute ($obj+"|") $tmp ("|"+$newLongName+"|")`;
	    $tmp = chop($tmp);
	    
	    $objs[$j] = $tmp;
	    }
	

	}  // end of for all objs

    select $objs;
    
}


// --------------------------------------------------------------------------

/*
 * cometRename() - Main UI entry.
 */
global proc cometRename()
{
    if (`window -ex cometRenameWin` != true)
        {
	window -w 310 -h 360 -t ("cometRename - 1.20") -in "cometRename" -s true -tb true cometRenameWin;

	columnLayout cr_mainCol;

	separator -style "in" -w 300 -h 8;

	rowColumnLayout -nc 2 -cw 1 50 -cw 2 250;
	    text -l "Search: " -al "right";
	    textField -tx "" tfSearch;
	    setParent "..";
	rowColumnLayout -nc 2 -cw 1 50 -cw 2 250;
	    text -l "Replace: " -al "right";
	    textField -tx "" tfReplace;
	    setParent "..";
	separator -style "none" -w 300 -h 4;
	button -l "Search And Replace" -al "center" -w 300 -c ("cR_doRename(0);") -ann "Searches for Search text and replaecs with Replace text.  Replace CAN be blank to remove text, or CAN be a part of or contain search string in it." butSearchReplace;

	separator -style "none" -w 300 -h 10;
	separator -style "in" -w 300 -h 8;

	rowColumnLayout -nc 2 -cw 1 50 -cw 2 250;
	    text -l "Prefix: " -al "right";
	    textField -tx "" tfPrefix;
	    setParent "..";
	separator -style "none" -w 300 -h 4;
	button -l "Add Prefix" -al "center" -w 300 -c ("cR_doRename(1);") -ann "Adds prefix text in before current name of each object" butPrefix;


	separator -style "none" -w 300 -h 10;
	separator -style "in" -w 300 -h 8;

	rowColumnLayout -nc 2 -cw 1 50 -cw 2 250;
	    text -l "Suffix: " -al "right";
	    textField -tx "" tfSuffix;
	    setParent "..";
	separator -style "none" -w 300 -h 4;
	button -l "Add Suffix" -al "center" -w 300 -c ("cR_doRename(2);") -ann "Adds suffix text in after current name of each object" butSuffix;

	separator -style "none" -w 300 -h 10;
	separator -style "in" -w 300 -h 8;

	rowColumnLayout -nc 2 -cw 1 50 -cw 2 250;
	    text -l "Rename: " -al "right";
	    textField -tx "" tfRename;
	    setParent "..";
	rowColumnLayout -nc 2 -cw 1 50 -cw 2 60;
	    text -l "Start #: " -al "right";
	    intField -v 1 -w 60 -min 0 ifNumber;
	    setParent "..";
	rowColumnLayout -nc 2 -cw 1 50 -cw 2 60;
	    text -l "Padding: " -al "right";
	    intField -v 0 -w 60 -min 0 ifPadding;
	    setParent "..";
	separator -style "none" -w 300 -h 4;
	button -l "Rename And Number" -al "center" -w 300 -c ("cR_doRename(3);") -ann "Renames each object with the base rename text, then adds a number after each, with the specfied number of zero padding in front of the number" butRenameNumber;

	separator -style "in" -w 300 -h 8;


	showWindow cometRenameWin;
	}
    else	// else just pop it up from being minimized again
    	{
	showWindow cometRenameWin;
	}

}


// --------------------------------------------------------------------------

/*

qa_skinManagerUI.mel

Author: Quentin Auger
	 March 2006


Description:
	This script makes three different actions:
	- copies skin weights from one or several point(s) and pastes the average weight values to one or more skinned points.
	  The paste action can be in additive or replace mode.
	- updates one destination skinCluster (created if necessary) to match the influences list of a source bound object.
	- selects the influences objects of a selected smooth bound object.
	
Instructions:
	
	Run "qa_skinManagerUI;" to open the GUI.

	'Copy Weights' button:
		Select ONE or SEVERAL source points that you want to copy weights from and hit "Copy Weights".
		
	'Paste Weights' button:
		Select one or more skinned points that you want to paste weights to and hit "Paste Weights".
		
		Works with a multiple selection source of any control point type (CVs, vertices, lattices points, particles, subdiv.control points)
		(COPY)  => will only keep points from the first skinned object (any type) listed in the filterExpanded current selection,
		(PASTE) => will then average weights from those points before transfer. 
			
	!!! Destination object still needs to be bound to same joints than the source.
	!!! For that, you can use the two other functions:
		
	'Select Infl.' button:
		Select one smooth bound object that you want the influences to be selected, and hit "Select Infl."
		
	'Match Infl.' button:
		Select one source smooth bound object or skinCluster and a destination "skinnable" one (must have control points or particles)
		and press "Match Infl."

	OPTIONS:
	- Weights threshold: weights of influences below that value will be ignored by de "Copy Weights" function.
	- Add Weights : the "Paste Weights" (multiplied by the value after the "x" letter) will add the copied values to the actual weights of the destination points.
	- Replace Weights: the "Paste Weights" will first reset to zero the actual weights of the destination points before pasting copied values...
	- Normalize after paste : guess what ;) Weights are normalized after being pasted, in additive or replace mode.
	
*/


global string $qa_skinMgrCopyCmd; 


global proc qa_skinManagerUI() {
	
	string $win = "qa_skinManager_v00";
	
	// Reset the window:
	if(`window -q -ex $win`) 
		deleteUI $win;
	if (`windowPref -exists $win`)
		windowPref -r $win;
	
		// h 218
	window -wh 207 260 -s 1 -t "qa_skinManager" $win;
	columnLayout;
		rowColumnLayout -nc 2;
			button -w 90 -l "Copy Weights" -c ("qa_fromUIcopyWeights();");
			button -w 90 -l "Paste Weights" -c ("qa_fromUIpasteWeights();");

			button -w 90 -l "Select Inlf." -c "qa_selectInfluences";
			button -w 90 -l "Match Inlf." -c "qa_matchInfluences";
		setParent ..;

	frameLayout -label "Copy/Paste options" -w 200 -cll 1 -cl 0 -labelAlign "top" -borderStyle "in" ;
		columnLayout;
			floatFieldGrp -precision 4 -v1 0.001 -w 193 -label "Weights threshold" qa_skinMgrMinW;
			checkBox -label "Nomalize after Paste" -align "left" -v 1 qa_skinMgrNorm; 
			rowColumnLayout -nc 2;
				radioCollection qa_skinMgrPasteModes;
				radioButton -label "add Weights   x "  qa_skinMgrAddMode ;
				floatField -precision 3 -min 0.0 -v 1.0 qa_skinMgrAddModeMult;
 				radioButton -label "replace Weights" -sl qa_skinMgrReplaceMode;
				
 				setParent ..;
			
			setParent ..;
		setParent ..;

	frameLayout -label "Copy/Paste HotKeys" -w 200 -cll 1 -cl 0 -labelAlign "top" -borderStyle "in" ;
		columnLayout;
			rowColumnLayout -nc 5 -cw 1 35 -cw 2 25 -cw 3 50 -cw 4 50 -cw 5 35;
				text -label "Copy : " -w 10; 
					textField -text "c" -w 10 qa_skinMgrCpWtHk;
		
					checkBox -label "+ Alt" -align "left" -v 1 qa_skinMgrCpWtHkAltModif; 
						checkBox -label "+ Ctrl" -align "left" -v 1 qa_skinMgrCpWtHkCtrlModif; 
					button -align "center" -w 10 -l "Set.." -c (" qa_skinMgrSetCopyHotkeys();");
			

				text -label "Paste : "; 
					textField -text "v" -w 10 qa_skinMgrPstWtHk;
				checkBox -label "+ Alt" -align "left" -v 1 qa_skinMgrPstWtHkAltModif; 
					checkBox -label "+ Ctrl" -align "left" -v 1 qa_skinMgrPstWtHkCtrlModif; 
				button -align "center" -w 10 -l "Set.." -c (" qa_skinMgrSetPasteHotkeys();");
			
 				setParent ..;
			setParent ..;
			
		setParent ..;

	rowColumnLayout -nc 2;
		button -align "center" -w 100 -l "Help" -c ("qa_skinManagerShowHelpUI");
		button -align "center" -w 100 -l "Close" -c ("deleteUI "+$win+"; qa_skinManagerDeleteHelpUI;");
		setParent ..;

	showWindow $win;
}
// qa_skinManagerUI;


global proc float qa_skinMgrGetMinWeight() {
	float $minW[] = `floatFieldGrp -q -v qa_skinMgrMinW`;
	return $minW[0];
}
global proc string qa_skinMgrGetPasteMode() {
	string $mode = "additive";
	string $modeUI = `radioCollection -q -sl qa_skinMgrPasteModes`;
	if ($modeUI=="qa_skinMgrReplaceMode")
		$mode = "replace";
	return $mode;
}
global proc float qa_skinMgrGetAddPasteMult() {
	float $addMult = `floatField -q -v qa_skinMgrAddModeMult `;
	return $addMult ;
}

global proc int qa_skinMgrGetNormalizeAfter() {
	int $norm = `checkBox -q -v qa_skinMgrNorm`;
	return $norm ;
}


global proc string[] qa_skinMgrGetCopyWgtHotKeyOptions() {

	string $cpHK = `textField -q -tx qa_skinMgrCpWtHk`;
	int $alt = `checkBox -q -v qa_skinMgrCpWtHkAltModif`;
	int $ctl = `checkBox -q -v qa_skinMgrCpWtHkCtrlModif`;
	
	return { $cpHK , $alt, $ctl };
}
global proc string[] qa_skinMgrGetPasteWgtHotKeyOptions() {

	string $pHK = `textField -q -tx qa_skinMgrPstWtHk`;
	int $alt = `checkBox -q -v qa_skinMgrPstWtHkAltModif`;
	int $ctl = `checkBox -q -v qa_skinMgrPstWtHkCtrlModif`;
	
	return { $pHK , $alt, $ctl };
}




// ------------------------------------------------------------------------------------------------------------------------------
// --------- hotKEYs management:
//------------------------------------------------------


global proc qa_skinMgrSetCopyHotkeys() 
{
	int $autoSave = true;
	string $cpHKvals[] = qa_skinMgrGetCopyWgtHotKeyOptions();
	
	string $keyShortCut = "c";
	if (size($cpHKvals[0])==1)
		$keyShortCut = $cpHKvals[0];
	int $altBool =  $cpHKvals[1];
	int $ctlBool =  $cpHKvals[2];

	// Check if that Key is safe and ask to use if not:
	int $letsSet = qa_checkHotkeysWithConfirm( $keyShortCut, $altBool, $ctlBool ) ;

	if ($letsSet) {
		string $copyAnnotation = "\"qa_skinManagerUI's Copy Weights\"";
		string $copyNameCommand = "qa_skinManagerUICopyWeights";
		string $copyCommand = "\"qa_fromUIcopyWeights()\"";

		qa_setHotkeys( $copyAnnotation, $copyNameCommand, $keyShortCut, $altBool, $ctlBool, $autoSave, $copyCommand ) ;
	}
}

global proc qa_skinMgrSetPasteHotkeys() 
{
	int $autoSave = true;
	string $pHKvals[] = qa_skinMgrGetPasteWgtHotKeyOptions();

	string $keyShortCut = "v";
	if (size($pHKvals[0])==1)
		$keyShortCut = $pHKvals[0];
	int $altBool =  $pHKvals[1];
	int $ctlBool =  $pHKvals[2];

	// Check if that Key is safe and ask to use if not:
	int $letsSet = qa_checkHotkeysWithConfirm( $keyShortCut, $altBool, $ctlBool ) ;

	if ($letsSet) {
		string $pasteAnnotation = "\"qa_skinManagerUI's Paste Weights\"";
		string $pasteNameCommand = "qa_skinManagerUIPasteWeights";
		string $pasteCommand = "\"qa_fromUIpasteWeights()\"";

		qa_setHotkeys( $pasteAnnotation , $pasteNameCommand, $keyShortCut, $altBool, $ctlBool, $autoSave, $pasteCommand ) ;
	}
}


global proc qa_setHotkeys( string $annotation, string $nameCommand, string $keyShortCut, int $altBool, int $ctlBool, int $autoSave, string $command ) 
{
	string $alt = "-alt";
	if ($altBool==0)
		$alt = "";
	string $ctl = "-ctl";
	if ($ctlBool==0)
		$ctl = "";

	eval ("nameCommand -ann "+$annotation+" -c "+$command+" "+$nameCommand+";\n");
	eval ("hotkey -keyShortcut "+$keyShortCut+" "+$alt+" "+$ctl+" -name "+$nameCommand+";");
	// hotkey -as 1;  // to auto-save hotkeys when you quit.
}

// Check if that Key is safe and ask to use if not:
//
global proc int qa_checkHotkeysWithConfirm( string $keyShortCut, int $altBool, int $ctlBool ) 
{
	int $ok = true;
	string $alreadySet = qa_checkHotkeys( $keyShortCut, $altBool, $ctlBool ) ;

	if (size($alreadySet)) {
	
		string $alt = " +Alt ";
		if ($altBool==0) $alt = "";
		string $ctl = " +Ctrl ";
		if ($ctlBool==0) $ctl = "";
		string $message = ( "\""+$keyShortCut+"\""+$alt+$ctl+" is already assigned to  \n" 
				  + "\""+$alreadySet+"\".\n"
				  + " Still want to Set it ? ");

		string $res = `confirmDialog -title "Oops!!!" -message $message
				-button "Yes" -button "No!" -defaultButton "No!"
				-cancelButton "No" -dismissString "Nothing" `;

		if ($res != "Yes")
			$ok = false;
	}
	return $ok;
}
	
global proc string qa_checkHotkeys( string $keyShortCut, int $altBool, int $ctlBool ) 
{
	string $alt = "-alt";
	if ($altBool==0)
		$alt = "";
	string $ctl = "-ctl";
	if ($ctlBool==0)
		$ctl = "";
	string $res = eval ("hotkeyCheck -k "+$keyShortCut+" "+ $alt+" "+ $ctl );	
	return $res;
}


//------------------ end of hotKEYS management
// ------------------------------------------------------------------------------------------------------------------------------



// -----------------   HELP --------------------------------------------------//
//
global proc qa_skinManagerShowHelpUI() {
	string $helpWin = "qa_skinManagerShowHelpUI";
	qa_skinManagerDeleteHelpUI() ;

	string $titleText = "        >>>>>>    qa_skinManagerUI - Help    <<<<<< ";

	string $copyPasteText = "\n"
	+ "- \"Copy Weights\" :\n   Select one or several points you want to copy weights from\n"
	+ "   and hit that button.\n\n"

	+ "- \"Paste Weights\" : Select points you want to copy \n"
	+ "   weights into and hit 'Paste..'\n\n"

	+ "> ACHTUNG!\n"
	+ "> Destination object needs to be bound to SAME influences\n"
	+ "> than the source !!!!   (Use following functions for that...) \n";

	string $inflFnText = "\n"
	+ "- \"Select Infl.\" :\n   Select one smooth bound object that you want\n"
	+ "   its influences to be selected, and hit that button.\n\n"

	+ "- \"Match Infl.\" :\n  Select one source smooth bound object or skinCluster\n"
	+ "  and a destination one (must have control points or particles)\n"
	+ "  and hit 'Match Infl.'\n";

	string $optionText = ("\n"
	+ "> Copy/Paste Weights options:\n\n" 
	+ " . \"Weights threshold\" value : influences less weighted than\n"
	+ "    that value will be disgarded by the COPY function.\n\n"

	+ " . \"replace Weights\" option :\n    Will reset to zero current weights of destination points\n"
	+ "    before pasting copied values.\n\n"

	+ " . \"add Weights\" option :\n    Copied weights are multiplied by the value close\n"
	+ "    to the \" x \" field, and then added to actual weights of \n"
	+ "    of the destination points.\n\n" 

	+ "> Copy/Paste HotKeys:\n" 
	+ " . \"Set..\" buttons will test if the key is already assigned\n"
	+ "    and prompt user to confirm...\n" );



	window -wh 300 620 -s 0 -t "qa_skinManagerHelp" $helpWin ;
 	columnLayout -adjustableColumn 0;
		text -label $titleText -align "right";
		separator -w 300;separator -w 300;
 		text -label $copyPasteText -align "left";
		separator -w 300;
 		text -label $inflFnText -align "left";
		separator -w 300;
		text -label $optionText -align "left";
		separator -w 300;

	button -w 292 -l "Close Help" -c ("qa_skinManagerDeleteHelpUI;");
 	showWindow;
}
// end of proc qa_skinManagerShowHelpUI()

global proc qa_skinManagerDeleteHelpUI() {
	string $helpWin = "qa_skinManagerShowHelpUI";
	if(`window -q -ex $helpWin `) {
		deleteUI $helpWin ;
		if (`windowPref -exists $helpWin `);
			windowPref -r $helpWin ;
	}
}


// ------------------------------------------------------------------------------------------------------------------------------
//
// functionnal procs:
//
// ------------------------------------------------------------------------------------------------------------------------------

global proc qa_fromUIcopyWeights() {
	float $min= qa_skinMgrGetMinWeight(); 
	qa_copyWeights($min);
}

global proc qa_fromUIpasteWeights() {
	string $pm = qa_skinMgrGetPasteMode(); 
	float $addMult = qa_skinMgrGetAddPasteMult(); 
	int $nrm = qa_skinMgrGetNormalizeAfter(); 
	qa_pasteWeights($pm,$nrm,$addMult);
}



// -- qa_filterSkinnedPoints()
//
// Will return stringArray={ name , skinClusterName } of the first skinned object in the list of points 
// (can be a mesh, NURBS, subdiv, lattice or particles).
// and changes the incomming stringArray[] to get rid of not associated points.
//
global proc string[] qa_filterSkinnedPoints( string $points[] ) 
{
	string $obj = "";
	string $skinCluster = "";
	string $keptPoints[] = {};
	
	for ($pt in $points) {
		string $rootName = `match "^[^\.]*" $pt`;
		
		// si on a toujours pas trouve un obj skinned et que le voila ! on le garde:
		string $tmpSkinCl = findRelatedSkinCluster($rootName) ;
		if ( ($obj == "") && (size($tmpSkinCl))  ) {
					 $keptPoints[size($keptPoints)] = $pt ;
					 $obj = $rootName ;
					 $skinCluster = $tmpSkinCl ;
					 print ("\n* Let's work with that source object \""+$obj+"\", whose skinCluster is \""+$skinCluster+"\":\n");
		}
		// si on a toujours pas trouve un obj skinned et que le voila ! on le vire de la liste:
		else if ( ($obj =="") && ( size($tmpSkinCl)  == 0) ) {
			print ("- skip point "+$pt+" - not owned by a skinned object!");
		}
		// si notre obj est trouve et que ce point en fait partie, on le garde:
		else if ( (size($obj)) && ($rootName == $obj) ) {
			 $keptPoints[size($keptPoints)] = $pt;
		}
		// si notre obj est trouve et que ce point n'en fait PAS partie, on le skip:
		else if ( (size($obj)) && ($rootName != $obj) ) {
			print ("- skip point "+$pt+" - not owned by first found skinned object!");
		}
	}
	$points = $keptPoints;
	return { $obj , $skinCluster } ;
}
// end of proc qa_filterSourcePoints( string $points[] ) 


global proc int qa_copyWeights( float $minWeight)
{
	global string $qa_skinMgrCopyCmd; 
	string $skinCluster = "";
	string $sourceObj = "";
	string $jointList[] = {};
	float $weightList[] = {};
	float $normalizedWeights[] = {};
	
	print ("\n\n>> qa_copyWeights( minimum = "+$minWeight+") :\n");
	
	string $sel[] = `ls -sl`;
	string $points[] = `filterExpand -sm 31 -sm 28 -sm 36 -sm 47 -sm 46 $sel`;
	/*
		string $vtcs[] = `filterExpand -sm 31 $sel`;
		string $CVs[] = `filterExpand -sm 28  $sel`;
		string $subdivPts[] = `filterExpand -sm 36 $sel`;
		string $lattPts[] = `filterExpand -sm 46 $sel`;
		string $particles[] = `filterExpand -sm 47 $sel`;
	*/
	
	string $result[] = qa_filterSkinnedPoints( $points ) ;
	if ( (size($result[0])) &&  (size($result[1])) ) {
		$sourceObj = $result[0];
		$skinCluster = $result[1];
	}
	else
		error "No skinning could be found in selected points!";
	
	
	int $skinnedPoints = 0;
	for ( $current_point in $points ) {
		string $currentGroup = "";
		string $source_pointJoints[] = {};
		float $source_pointJointWeights[] = {} ;	// string $current_point = $sel[0];

		print ("\n- \""+$current_point+"\" skin-bound to : \n");

		$source_pointJoints = `skinPercent -ib $minWeight -q -t $skinCluster $current_point `;
		if (size($source_pointJoints)==0) {
			print ("-> \""+$current_point+"\" : no appropriate influence (weight>0.001) found for that point... Skipped. \n");
			continue;
		}
		$skinnedPoints ++;

		int $l = 0;
		for ($l = 0 ; $l < size($source_pointJoints) ; $l++) {
			string $current_joint = $source_pointJoints[$l];
			$source_pointJointWeights[$l] = `skinPercent -t $current_joint -q  $skinCluster $current_point` ;
			print ("  ."+$source_pointJoints[$l]+" : "+$source_pointJointWeights[$l]+"\n");

			// Updates joints/weights lists:
			int $allreadyInlist = qa_firstStringIndexInArray( $current_joint, $jointList);
			if ($allreadyInlist == -1)
			{
				int $freeIndex = size($jointList);
				qa_stringArrayAppendNoDuplicate ($jointList, $current_joint);
				$weightList[$freeIndex] = $source_pointJointWeights[$l];
			}
			else
				$weightList[$allreadyInlist] = $weightList[$allreadyInlist] + $source_pointJointWeights[$l];			
		}
	}
		
	// Normalizing weights:
	if ($skinnedPoints > 0)
		for ($j = 0 ; $j < size($jointList) ; $j++)
			$normalizedWeights[$j] = $weightList[$j] / $skinnedPoints;
	else {
		warning "No skinned points could be treated ! - see Script Editor for details...";
		return 0;
	}
	
	// Command Creation:
	string $cmd = "skinPercent";
	
	int $size = `size($jointList)`;	
	for($i = 0;$i<$size;$i++) 
		$cmd += (" -tv " + $jointList[$i] + " " + $normalizedWeights[$i]);
		
	
	$qa_skinMgrCopyCmd = $cmd;
	print ("\n-> After averaging those weights, the stocked command is: \n");
	print  (" \" "+$qa_skinMgrCopyCmd+" \"\n");
	
	return $skinnedPoints;
		
}
// end of proc qa_copyWeights()


/*
 string $pasteMode = "additive";
 int $normalizeAfterPaste = 1;
 float $addMult = 0.5;


*/
global proc qa_pasteWeights( string $pasteMode , int $normalizeAfterPaste , float $addMult)
{
	global string $qa_skinMgrCopyCmd;
	string $pasteCommand = "skinPercent";
	
	string $cmd = "";
	string $destObj = "";
	string $skinCluster = "";
	
	if ($pasteMode=="replace") 
		// In this case, assuming that the addMult value is neutral i.e = 1.0
		$addMult = 1.0;
	print ("\n\n>> qa_pasteWeights( \""+$pasteMode+"\" mode, mult = "+$addMult+", NormalizeAfterPaste = "+ $normalizeAfterPaste +") :\n");

	string $sel[] = `ls -sl -fl`;
	string $points[] = `filterExpand -sm 31 -sm 28 -sm 36 -sm 47 -sm 46 $sel`;
	string $result[] = qa_filterSkinnedPoints( $points ) ;
	if ( (size($result[0])) &&  (size($result[1])) ) {
		$destObj = $result[0];
		$skinCluster = $result[1];
	}
	else
		error "No skinning could be found in selected points!";

	// Disable weight normalisation
	setAttr ($skinCluster + ".normalizeWeights") 0;
	
	
	// Pre-parsing stored command in case of additive and $addMult != 1.0 (neutral) and > 0.0:
	//
	if ( ($pasteMode=="additive") && ($addMult != 1.0) && ($addMult > 0.0) ) {
	
		string $tmpArray[] = stringToStringArray($qa_skinMgrCopyCmd, " ");

		for ($jw=1; $jw<size($tmpArray); $jw+=3) {
			//print ("\n"+$tmpArray[$jw]+" "+ $tmpArray[$jw+1]+" "+ $tmpArray[$jw+2]+"\n");
			float $multWeight =  $tmpArray[$jw+2];
   			float $multWeight = $multWeight*$addMult;
			$pasteCommand += (" -tv " + $tmpArray[$jw+1] + " " + $multWeight);
		}
	}
	else if ( ($pasteMode=="additive") && ($addMult < 0.0) )
		error ("The multipicative value for the additive Paste mode is NEGATIVE !...");
	else
		$pasteCommand = $qa_skinMgrCopyCmd;
					

	// First store actual bound influences and Hold states of that skinCluster, and set them to OFF:
	string $destJoints[] = `skinCluster -q -inf $skinCluster `;		
	int $destJointsHolds[] = {};
	for ($j=0; $j<size($destJoints); $j++) {
		$destJointsHolds[$j] = `getAttr ($destJoints[$j]+".liw")`;
		catch(`setAttr ($destJoints[$j]+".liw") 0`);
	}
	
	for($pt in $points) {

			// If pasteMode = "replace" : must set every current weight to zero first:
			//
			if ($pasteMode=="replace") {
				// In this case, assuming that the addMult value is neutral i.e = 1.0
				$addMult = 1.0;
				string $pointJoints[] = `skinPercent -ib 0.0001 -q -t $skinCluster $pt`;	
				string $resetWeightsCmd = "skinPercent";
				for ($j=0; $j<size($pointJoints); $j++) 
					$resetWeightsCmd += (" -tv "+$pointJoints[$j]+" 0.0");
				$resetWeightsCmd += (" "+$skinCluster+" "+$pt);
				eval($resetWeightsCmd);
				print (" - "+$pt+"'s infl.weights reset to zero first.\n");
			}
		
			// Then set to the copied weights:
			$cmd = $pasteCommand;
			$cmd = ($cmd + " " + $skinCluster + " " + $pt);
			print "-> ";	evalEcho($cmd);
	}	
		
	// Re-Enable weight normalisation
	if ($normalizeAfterPaste) {
		setAttr ($skinCluster + ".normalizeWeights") 1;
		skinPercent -normalize true $skinCluster;
	}
	// Reseting Hold states to previous values:
	for ($j=0; $j<size($destJoints); $j++) 
		catch(`setAttr ($destJoints[$j]+".liw") $destJointsHolds[$j]`);
	
}
// end of proc qa_pasteWeights()


global proc int qa_isStringInArray( string $theString, string $theArray[] ) {
	string $s;
	for ($s in $theArray)
		if( $s == $theString )
			return 1;
	return 0;
}


global proc int qa_stringArrayAppendNoDuplicate (string $theArray[], string $theString) {
	int $success = false;
	if (!qa_isStringInArray( $theString, $theArray )) {
		$theArray[size($theArray)] = $theString;
		$success = true;
	}
	return $success;
}

global proc int qa_firstStringIndexInArray( string $theString, string $theArray[] ) {
  	int $i = 0;
	for ($i=0; $i<size($theArray); $i++)
		if ($theString == $theArray[$i])
			return $i;
	return -1;
}



//	qa_matchInfluences()
//	---------------------------------------------------------------
//
/////////////////////////////////////////////////////////////////////////
//

global proc qa_matchInfluences ()
{
	string $skinClusterTreatment = "" ;
	int $verbose = true;
	print "\n>>> \"qa_matchInfluences()\" <<<\n";
	print   "-------------------------------\n\n";
	
	string $sel[] = `ls -sl`;
	if ( size($sel) == 2 )
		$skinClusterTreatment = qa_doUpdateListOfInfluences ( $sel[0] , $sel[1], $verbose) ;
	else 
		error "Please select 2 objects, first one must be a skinCluster or a smooth bound object, the 2nd one a 'skinable' object.";
		
	if ($skinClusterTreatment == "FAILED")
		error ("Problems occured while matching Source and Destination objects'influences lists - See Script Editor for details...");
	else
		print "\n>> Matching Source and Destination objects skin influences COMPLETE. :-)\n\n" ;
		print ("Influences list of \""+$sel[1]+"\"s skinCluster was "+$skinClusterTreatment+" according to \""+$sel[0]+"\"s one. :-)\n") ;
}



global proc string qa_doUpdateListOfInfluences (string $srcObj , string $destObj , int $verbose) 
{
	int $success = false;
	string $skinClusterTreatment = "FAILED";
	
	string $srcSkinCluster = "";
	string $source_infl_list[] = {};
	
	int $validDestObj = false ;
	string $destSkinCluster = "";
	string $dest_infl_list[] = {};

	if ( size($srcObj) &&  size($destObj) ) {
		if (`objectType $srcObj`=="skinCluster") 
			$srcSkinCluster = $srcObj ;
		else
			$srcSkinCluster = findRelatedSkinCluster($srcObj) ;
	}
	 
	if (size($srcSkinCluster)) {
		$source_infl_list = `skinCluster -q -inf $srcObj `;

		if ($verbose) {
			print ("- Source Object: \""+$srcObj +"\"  -->>  Destination Object: \""+$destObj +"\"\n");
			print ("\n* "+size($source_infl_list)+" influences for source object's skinCluster \""+$srcSkinCluster+"\".\n\n");
		}
		
		$destSkinCluster = findRelatedSkinCluster($destObj) ;
		if ( size($destSkinCluster) == 0 )
			$validDestObj = `objExists ($destObj+".cp")`;
		else
			$validDestObj = true;
	}
	else {
		warning "The 1rst object is NOT a skinCluster, neither a smooth bound object...";
		return $skinClusterTreatment;
	}
	
	

	// Do default skinning if none on the target object :
	//
	if ( ( size($destSkinCluster) == 0) && ($validDestObj) )	{
		if ($verbose) print "* Destination object was NOT skinned : binding it according to source skeleton...\n";
		string $tempDestSkClArray[] = {};
		
		//-----------
		$source_infl_list = stringArrayRemoveDuplicates($source_infl_list);
		
		// Separating pure Joints (directly skinnable) and other influences (shapes, transforms..)
		// which gonna be bound afterwards:
		string $inflToAddAfterwards[] = qa_keepThatTypeInArray ( $source_infl_list , "joint" ); // that proc "cleans" the input stringArray and returns the rejected strings.
		
		print ("\t- First let's bind to "+size($source_infl_list)+" pure joints ("+size($inflToAddAfterwards)+" other infl. later):\n");
		if ($verbose) { print "\t  Those ones:\n\n"; print $source_infl_list; print "\n";}

		$success = !catch ($tempDestSkClArray= `skinCluster -tsb $source_infl_list $destObj`) ;
		if ( ($success) && (size($inflToAddAfterwards)) ) {
			print ("\t.... first pass done.\n\n");
			print ("\t- Then let's add "+size($inflToAddAfterwards)+" non-joint-typed influences into skinCluster \""+$tempDestSkClArray[0]+"\" (without 'Use Geometry' option): \n");

			int $localSuccess = true;
			for ( $i = 0 ; $i < size($inflToAddAfterwards) ; $i++ ) {
				$localSuccess *= !catch(`skinCluster -e -dr 10 -ps 50 -ns 100 -lw true -wt 0 -ai $inflToAddAfterwards[$i] $tempDestSkClArray[0]`);
				if ( ($verbose) && ($localSuccess))
					print ("\t  . \""+$inflToAddAfterwards[$i]+"\" added.\n") ;
			}
			if ($localSuccess==false)
				warning ("Could NOT add wanted influences to skinCluster \""+$tempDestSkClArray[0]+"\"...");
			$success = $localSuccess;
		}else if ($success==false){
			warning ("Could NOT bind \""+$destObj+"\!");
		}
		if ($success) {
			$destSkinCluster = $tempDestSkClArray[0] ;
			$skinClusterTreatment = "CREATED" ;
			print "\n\t...last pass done.\n" ;
		}
	}
	
	// If some source influences are missing to actual skinCluster :
	//
	else if ( (size($destSkinCluster)) && ($validDestObj)  ) {
		$dest_infl_list = `skinCluster -q -influence $destSkinCluster`;	
		$dest_infl_list = stringArrayRemoveDuplicates($dest_infl_list) ;
		string $missingInfl[] = stringArrayRemove($dest_infl_list , $source_infl_list);

		print ("* "+size($missingInfl)+" missing influences in the destination skinCluster \""+$destSkinCluster+"\" compared to the source one.\n") ;

		if ( size($missingInfl) ) {
			if ($verbose) 
				print ("\t- Updating destination skinCluster \""+$destSkinCluster+"\" (without 'Use Geometry' option) :    \n") ;
				
			int $localSuccess = true;
			for ( $miss = 0 ; $miss < size($missingInfl) ; $miss++ ) {
				$localSuccess *= !catch(`skinCluster -e -dr 10 -ps 50 -ns 100 -lw true -wt 0 -ai $missingInfl[$miss] $destSkinCluster`);
				if ( ($verbose) && ($localSuccess))
					print ("\t  . \""+$missingInfl[$miss]+"\" added.\n") ;
				
			}
			if ($localSuccess == false)
				warning ("  - Cannot update the destination skinCluster '"+$destSkinCluster+"' !") ;
			else {
				$success = true;
				$skinClusterTreatment = "UPDATED" ;
				print "\n\t...adding influences done.\n" ;
			}
		}
		else {
			print ("Source and Destination influences are already matching !\n");
			$success = true;
			$skinClusterTreatment = "ALREADY OK";
		}
	}
	else if ($validDestObj == false)
		warning "The 2nd object is NOT skinnable...";
		
	return $skinClusterTreatment ;
}
// end of proc qa_doUpdateListOfInfluences()



global proc string[] qa_keepThatTypeInArray ( string $srcArray[] , string $typeToKeep )
{
	string $rejectedObj[];
	if ($typeToKeep == "") error ($typeToKeep+" is NOT a valid type!");
	string $cleanerArray[] = $srcArray;
	for ($obj in $srcArray) {
		if (`nodeType $obj`!= $typeToKeep) {
			$rejectedObj[size($rejectedObj)] = $obj;
			$cleanerArray = stringArrayRemove( {$obj}, $cleanerArray) ;
			}
	}
	$srcArray = $cleanerArray ;
	return $rejectedObj;
}



// ----------------------  qa_selectInfluences() :
//
global proc qa_selectInfluences()
{
	string $sel[] = `ls -sl`;

	string $skcl = "";
	if ( size($sel) == 1 ) {
		if (`objectType $sel[0]`=="skinCluster") 
			$skcl = $sel[0];
		else
			$skcl = findRelatedSkinCluster($sel[0]) ;
	}

	if (size($skcl)) {
		string $infl[] = `skinCluster -q -inf $sel[0]`;
		print ("\n>>> qa_selectInfluences() : on object \""+$sel[0]+"\", skinCluster \""+$skcl+"\" : \n\n");
		print $infl;
		select -r $infl;
		print "\n";
		print (">> Influences of  \""+$skcl+"\"  listed above are selected (see script Editor...)");
	}
	else 
		error "Please select a skinCluster or a smooth bound object...";
};


////////////////////////////////Parentcon//////////////////////////////////////

global proc ParentCon()
{
    parentConstraint -mo -weight 1;
    scaleConstraint -mo -weight 1;
};
//////////////////////////////////////////////////////////////////////
global proc int rCreateFollicleProc()
{
    string $selection[] = `ls -sl -fl`;
    if(size($selection)==0){
        return 0;
    }
    string $sel[]=`ls -sl -o`;
    string $target = $sel[0];
    for($vertex in $selection) {
        //string $vertex = $selection[0];
        float $pos[]=`xform -q -t -ws $vertex`;
        
        string $follicle = `createNode follicle`;
        connectAttr ($target+".worldMatrix[0]") ($follicle+".inputWorldMatrix");
        connectAttr ($target+".outMesh") ($follicle+".inputMesh");
        string $currentUVSet[] = `polyUVSet -q -currentUVSet $target`;
        setAttr ($follicle + ".mapSetName") -type "string" $currentUVSet[0];
        
        string $uv[]=`polyListComponentConversion -tuv $vertex`;
        float $uvs[]=`polyEditUV -q -u -v $uv[0]`;
        
        setAttr ($follicle+".parameterU") $uvs[0];
        setAttr ($follicle+".parameterV") $uvs[1];
        
        string $parent[] = `listRelatives -p $follicle`;
        
        connectAttr -f ($follicle+".outRotate") ($parent[0]+".rotate");
        connectAttr -f ($follicle+".outTranslate") ($parent[0]+".translate");
    }
    return 1;
}


/////////////////////////////
global proc redefineController()
{
//________________________________Window___________________
if (`window -ex mtCwin`)
deleteUI mtCwin;
window -s off -w 355 -h 100 -t "Redifine Controller" mtCwin;

//________________________________Head___________________
columnLayout -w 355 -adj on;
separator -st "none"  -vis on -h 10 ;
text -l " @ NavaBharath.Dulam Redifine Controller @";

separator -st "none"  -vis on -h 10 ;

rowColumnLayout -h 25 -nc 34 ;
text -w 83 -l"" ;
button -l"" -en off -w 8  -bgc .631 .631 .631 ;
button -l"" -en off -w 8  -bgc .467 .467 .467 ;
button -l"" -en off -w 8  -bgc 0 0 0 ;
button -l"" -en off -w 8  -bgc .247 .247 .247 ;
button -l"" -en off -w 8  -bgc .498 .498 .498 ;
button -l"" -en off -w 8  -bgc 0.608 0 0.157 ;
button -l"" -en off -w 8  -bgc 0 0.016 0.373 ;
button -l"" -en off -w 8  -bgc 0 0 1 ;
button -l"" -en off -w 8  -bgc 0 0.275 0.094 ;
button -l"" -en off -w 8  -bgc 0.145 0 0.263;
button -l"" -en off -w 8  -bgc 0.78 0 0.78 ;
button -l"" -en off -w 8  -bgc 0.537 0.278 0.2 ;
button -l"" -en off -w 8  -bgc 0.243 0.133 0.122 ;
button -l"" -en off -w 8  -bgc 0.6 0.145 0 ;
button -l"" -en off -w 8  -bgc 1 0 0 ;
button -l"" -en off -w 8  -bgc 0 1 0;
button -l"" -en off -w 8  -bgc 0 0.255 0.6 ;
button -l"" -en off -w 8  -bgc 1 1 1;
button -l"" -en off -w 8  -bgc 1 1 0 ;
button -l"" -en off -w 8  -bgc 0.388 0.863 1 ;
button -l"" -en off -w 8  -bgc 0.263 1 0.635;
button -l"" -en off -w 8  -bgc 1 0.686 0.686 ;
button -l"" -en off -w 8  -bgc 0.89 0.675 0.475 ;
button -l"" -en off -w 8  -bgc 1 1 0.384 ;
button -l"" -en off -w 8  -bgc 0 0.6 0.325 ;
button -l"" -en off -w 8  -bgc 0.627 0.412 0.188 ;
button -l"" -en off -w 8  -bgc 0.62 0.627 0.188 ;
button -l"" -en off -w 8  -bgc 0.408 0.627 0.188 ;
button -l"" -en off -w 8  -bgc 0.188 0.627 0.365 ;
button -l"" -en off -w 8  -bgc 0.188 0.627 0.627 ;
button -l"" -en off -w 8  -bgc 0.188 0.404 0.627 ;
button -l"" -en off -w 8  -bgc 0.435 0.188 0.627 ;
button -l"" -en off -w 8  -bgc 0.631 0.188 0.412 ;
setParent -u;

columnLayout ;
colorIndexSliderGrp -w 352 -min 0 -max 32 -value 14 cslider;
rowColumnLayout -nc 4 -cs 2 2;
button  -w 60 -l "Color" -c colorbtn;
button  -w 60 -l "Shape" -c changeShape;
text  -l"" -w 2;
optionMenuGrp -adj on -l "Ctrl Shape:" cShape; 
menuItem -l "Cube";
menuItem -l "Circle";
menuItem -l "Square";
menuItem -l "Locator";
menuItem -l "Sphere";
menuItem -l "Pin";
menuItem -l "Plus";
menuItem -l "Th. Plus";

setParent -u;

separator -w 355 -st "none"  -vis on -h 3 ;

rowColumnLayout -nc 2 -cs 2 2;
button -h 17 -w 120 -l "Parent Chain" -c parentChain;
button -h 17 -w 50 -l "Joint" -c loopJoint;
setParent -u;

separator -w 355 -st "none"  -vis on -h 5 ;
rowColumnLayout -nc 3;
text -w 74 -l "Object Type:" stype;
radioCollection ;
radioButton -l "Mesh" -sl -cc msh msh;
radioButton -l "Others" -cc othr othr;
setParent -u;
separator -w 355 -st "in"  -vis on -h 8 ;

rowColumnLayout -nc 4 -vis (`radioButton  -q -sl othr`) rcOthr;
text -w 50 -l "";
checkBox -w 100 -l "" cto;
checkBox -w 100 -l "FK Ctrl"  fko;
checkBox -w 100 -l "Parent Cons."  pto;
setParent -u;
rowColumnLayout -h 19  -vis (`radioButton  -q -sl othr`) ccOthr;
text -l "";
setParent -u;

rowColumnLayout -nc 4 rcJoint;
text -w 50 -l"";
checkBox -w 100 -l "Ctrl"  ct;
checkBox -w 100 -l "FK Ctrl" fk;
checkBox -w 100 -l "Joint" -cc jt jt;
setParent -u;

rowColumnLayout -nc 4 ccJoint;
text -w 50 -l"";
checkBox -w 100 -l "Parent Cons." ptj;
checkBox -w 100 -l "Single Mesh" -vis (`checkBox -q -v ct`) -cc smj smj;
checkBox -w 100 -l "Skin Cls." -vis (`checkBox -q -v jt`) sk;
setParent -u;

separator -st "none"  -vis on -h 5 ;
columnLayout ;    
button -w 349 -h 40 -bgc .6 .6 .6 -l "Create" -c createJ createJ;
button -w 349  -h 40 -l "Create" -vis (`radioButton  -q -sl othr`) -c createO createO;
separator -st "none"  -vis on -h 5 ;
text -w 349  -l "Select deformable object" msgText;
separator -st "none"  -vis on -h 10 ;



showWindow mtCwin;
//________________________________Window_End___________________

}//__MultiController_end-----------


global proc jt()
{
	checkBox -e -vis  (`checkBox -q -v jt`) sk;
	checkBox -e -vis  (`checkBox -q -v jt`) smj;
	string $jpt = `checkBox -q -v jt`;
	if 	($jpt==on)
	{
	checkBox -e -v off -vis off ptj;
	}
	if 	($jpt==off)
	{
	checkBox -e -vis on ptj;
	text -e -l "Select deformable object" msgText;
	}
}

global proc msh()
{
	rowColumnLayout -e -vis (`radioButton  -q -sl msh`) rcJoint;
	rowColumnLayout -e -vis (`radioButton  -q -sl msh`) ccJoint;
	button -e -vis (`radioButton  -q -sl msh`) createJ;
	text -e -l "Select deformable object" msgText;
	
	if (`checkBox -q -v smj`==1)
	{
	text -e -l "Select single edge for loop. Do not select edge loop" msgText;
	}
	else{text -e -l "Select deformable object" msgText;}
}

global proc smj()
{
	if (`checkBox -q -v smj`==1)
	{
	text -e -l "Select single edge for loop. Do not select edge loop" msgText;
	}
	else{text -e -l "Select deformable object" msgText;}
}

global proc othr()
{
	rowColumnLayout -e -vis (`radioButton  -q -sl othr`) rcOthr;
	rowColumnLayout -e -vis (`radioButton  -q -sl othr`) ccOthr;
	button -e -vis (`radioButton  -q -sl othr`) createO;
	text -e -l "Select non deformable object" msgText;
}
//_________colorbtn__
global proc colorbtn()
{
	string $ctrlSel[] = `ls -sl`;
    int $Os = `size($ctrlSel)`;
	for ($all in $ctrlSel)
	{
		setAttr ($all + ".overrideEnabled") 1;
		int $color = `colorIndexSliderGrp -q -v cslider`;
		if($color > 0)
		setAttr ($all + ".overrideColor") ($color - 1); 
	}
				
}


//__________Making_Curve_



global proc cCrv()
{
	string $cShape = `optionMenuGrp -q -v cShape`;
	
	if ($cShape=="Cube")
	{
		curve -d 1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 
		-p -1 1 -1 -p 1 1 -1 -p 1 1 1 -p -1 1 1 
		-p -1 1 -1 -p -1 -1 -1 -p -1 -1 1 -p -1 1 1 
		-p -1 -1 1 -p 1 -1 1 -p 1 1 1 -p 1 -1 1 
		-p 1 -1 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 
		-k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 ;
	}//__cube_end
	
	if ($cShape=="Circle")
	{
		circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;
	}//__circle_end
	
	if ($cShape=="Square")
	{
		curve -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 1 -p 1 0 1 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
	}//_square_end
	
	if ($cShape=="Sphere")
	{
		curve -d 1 -p 0.75 -1.299038 0 -p 0.53033 -1.299038 0.53033 -p 0 -1.299038 0.75 -p -0.53033 -1.299038 0.53033 -p -0.75 
		-1.299038 0 -p -0.53033 -1.299038 -0.53033 -p 0 -1.299038 -0.75 -p 0.53033 -1.299038 -0.53033 -p 0.75 -1.299038 0 -p 1.299038
		-0.75 0 -p 0.918559 -0.75 0.918559 -p 0 -0.75 1.299038 -p -0.918559 -0.75 0.918559 -p -1.299038 -0.75 0 -p -0.918559 -0.75 
		-0.918559 -p 0 -0.75 -1.299038 -p 0.918559 -0.75 -0.918559 -p 1.299038 -0.75 0 -p 1.5 0 0 -p 1.06066 0 1.06066 -p 0 0 1.5 -p 
		-1.06066 0 1.06066 -p -1.5 0 0 -p -1.06066 0 -1.06066 -p 0 0 -1.5 -p 1.06066 0 -1.06066 -p 1.5 0 0 -p 1.299038 0.75 0 -p 0.918559 0.75 0.918559 
		-p 0 0.75 1.299038 -p -0.918559 0.75 0.918559 -p -1.299038 0.75 0 -p -0.918559 0.75 -0.918559 -p 0 0.75 -1.299038 -p 0.918559 0.75 -0.918559
		-p 1.299038 0.75 0 -p 0.75 1.299038 0 -p 0.53033 1.299038 0.53033 -p 0 1.299038 0.75 -p -0.53033 1.299038 0.53033 -p -0.75 1.299038 0 
		-p -0.53033 1.299038 -0.53033 -p 0 1.299038 -0.75 -p 0.53033 1.299038 -0.53033 -p 0.75 1.299038 0 -p 0 1.5 0 -p 0.53033 1.299038 -0.53033 
		-p 0.918559 0.75 -0.918559 -p 1.06066 0 -1.06066 -p 0.918559 -0.75 -0.918559 -p 0.53033 -1.299038 -0.53033 -p 0 -1.5 0 -p 0 -1.299038 -0.75 
		-p 0 -0.75 -1.299038 -p 0 0 -1.5 -p 0 0.75 -1.299038 -p 0 1.299038 -0.75 -p 0 1.5 0 -p -0.53033 1.299038 -0.53033 -p -0.918559 0.75 -0.918559
		-p -1.06066 0 -1.06066 -p -0.918559 -0.75 -0.918559 -p -0.53033 -1.299038 -0.53033 -p 0 -1.5 0 -p -0.75 -1.299038 0 -p -1.299038 -0.75 0 -p -1.5 0 0 
		-p -1.299038 0.75 0 -p -0.75 1.299038 0 -p 0 1.5 0 -p -0.53033 1.299038 0.53033 -p -0.918559 0.75 0.918559 -p -1.06066 0 1.06066 -p -0.918559 -0.75 0.918559 
		-p -0.53033 -1.299038 0.53033 -p 0 -1.5 0 -p 0 -1.299038 0.75 -p 0 -0.75 1.299038 -p 0 0 1.5 -p 0 0.75 1.299038 -p 0 1.299038 0.75 -p 0 1.5 0 
		-p 0.53033 1.299038 0.53033 -p 0.918559 0.75 0.918559 -p 1.06066 0 1.06066 -p 0.918559 -0.75 0.918559 -p 0.53033 -1.299038 0.53033 -p 0 -1.5 0 -p 0.75 
		-1.299038 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 
		-k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52 
		-k 53 -k 54 -k 55 -k 56 -k 57 -k 58 -k 59 -k 60 -k 61 -k 62 -k 63 -k 64 -k 65 -k 66 -k 67 -k 68 -k 69 -k 70 -k 71 -k 72 -k 73 -k 74 -k 75 -k 76 -k 77 -k 78 -k 79 
		-k 80 -k 81 -k 82 -k 83 -k 84 -k 85 -k 86 -k 87 -k 88 ;

	}//_sphere_end
	
	if ($cShape=="Plus")
	{
		curve -d 1 -p -0.333333 0 -0.333333 -p -1 0 -0.333333 -p -1 0 0.333333 -p -0.333333 0 0.333333 -p -0.333333 0 1 -p 0.333333 0 1 -p 0.333333 0 0.333333 -p 1 0 0.333333 -p 1 0 -0.333333 -p 0.333333 0 -0.333333 -p 0.333333 0 -1 -p -0.333333 0 -1 -p -0.333333 0 -0.333333 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 ;

	}//_plus_end
	
	if ($cShape=="Th. Plus")
	{
		curve -d 1 -p -0.2 0 -0.2 -p -1 0 -0.2 -p -1 0 0.2 -p -0.2 0 0.2 -p -0.2 0 1 -p 0.2 0 1 -p 0.2 0 0.2 -p 1 0 0.2 -p 1 0 -0.2 -p 0.2 0 -0.2 -p 0.2 0 -1 -p -0.2 0 -1 -p -0.2 0 -0.2 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 ;
	}//_th._plus_end
	
	if ($cShape=="Pin")
	{
		curve -d 3 -p -0.00763035 0 0 -p -0.0357116 0 -0.00981879 -p -0.0918741 0 -0.0294564 -p -1.370385 0 -0.0349424 -p -2.327362 0 -0.321415 -p -2.775261 0 0 -p -2.327362 0 0.321415 -p -1.370385 0 0.0349424 -p -0.0918741 0 0.0294564 -p -0.0357116 0 0.00981879 -p -0.00763035 0 0 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 8 -k 8 ;

	}//_if_pin_end
	
	if ($cShape=="Locator")
	{
		curve -d 1 -p 0 0 1 -p 0 0 -1 -p 0 0 0 -p 0 1 0 -p 0 -1 0 -p 0 0 0 -p -1 0 0 -p 1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;
	}//_if_locator_end
}//--cCrv_end----------

global proc changeShape()
{
	string $csel[] = `ls-sl`;
	for ($i=0;$i<size($csel); ++$i)
	{
		select -r $csel[$i];
		select -r `ls -sl -s -dag`;
		doDelete;
		cCrv;
		string $cCrv[] = `ls-sl`;
		select -r `ls -sl -s -dag`;
		rename ($csel[$i]+"Shape");
		string $cCrvS[] = `ls-sl`;
		parent -r -s $cCrvS $csel[$i];
		select -r $cCrv; doDelete;
		
	}//_$i_end
}//--changeShape_end--------

//___________CreateJ_Button_
global proc createJ()
{
	//Checbox Work
	float $jt = `checkBox  -q -v jt`;
	float $ct = `checkBox -q -v ct`;
	float$sk = `checkBox -q -v sk`;
	float$fk = `checkBox -q -v fk`;
	float$ptj = `checkBox -q -v ptj`;
	float$smj = `checkBox -q -v smj`;

string $msel[] = `ls-sl`;
if ($smj==0)//__if_smj_off
{
for($i=0; $i<size($msel); ++$i)
{
	//________________IF_Joint_ON_
	if ($jt==1)
	{
		if ($ct==0){
		select $msel[$i];	
		newCluster " -envelope 0";
		string $clsel[] = `ls-sl`;
		joint ; rename ($msel[$i]+"_J") ; parent -w;
		string $jsel[] = `ls-sl`;
		parentConstraint $clsel $jsel ;
		delete $clsel;
			if ($sk==1)
			{
				skinCluster $msel[$i] $jsel ;
			}//_if_skin_end
		}
	}//_if_jnft_end
	
	//________________if_Ctrl_om_
	if ($ct==1)
	{
		select $msel[$i];	
		newCluster " -envelope 0";
		string $clsel[] = `ls-sl`;
		cCrv;
		rename ($msel[$i]+"_ctl");
		string $crsel[] = `ls-sl`;
		colorbtn;
		doGroup 0 1 1; rename ($msel[$i]+"_ctl_grp");
		string $grsel[] = `ls-sl`;
		parentConstraint $clsel $grsel ;
		delete $clsel;
		
			if ($ptj==1)
			{
			parentConstraint $crsel $msel[$i] ;
			scaleConstraint $crsel $msel[$i] ;
			}//_if_ptj_end
		
			if ($jt==1)
			{
				joint ; rename ($msel[$i]+"_Jnt") ; parent -w;
				string $jsel[] = `ls-sl`;
				parentConstraint $crsel $jsel ;
				scaleConstraint $crsel $jsel ;
				
				if ($sk==1)
				{
				skinCluster $msel[$i] $jsel ;
				}//_if_skin_end
			}//__if_jnt_end
		

	}//_if_ct_end
	
}//__$i_end

	if (($fk+$ct)==2)
	{
		for($i=0; $i<(size($msel)-1); ++$i)
		{
		parent ($msel[$i+1]+"_ctl_grp") ($msel[$i]+"_ctl") ;
		}
	}//_if_fkj_end


}//__if_smj_off_end

if ($smj==1)
{
	string $osel[] = `ls-fl-os`;
	select `ls-sl -o`;
	pickWalk -d up;
	string $na[] = `ls-sl -o`;
	for($i=0; $i<size($osel); ++$i)
	{
		select $osel[$i];
		polySelectSp -loop;	
		newCluster " -envelope 0";
		string $clsel[] = `ls-sl`;
		joint ; rename ($na[0]+"_"+($i+1)+"_Jnt");  parent -w;
		string $jsel[] = `ls-sl`;
		parentConstraint $clsel $jsel ;
		delete $clsel;	
	
	}//_$i_end

	for($i=0; $i<(size($osel)-1); ++$i)
	{
		parent ($na[0]+"_"+($i+2)+"_Jnt") ($na[0]+"_"+($i+1)+"_Jnt") ;
	}
	
	joint -e  -oj yxz -sao xup -ch ($na[0]+"_1_Jnt");
	joint -e  -oj none -ch ($na[0]+"_"+(size($osel))+"_Jnt");

	if ($sk==1)
	{
	skinCluster -bm 1 -sm 0 -mi 6 -dr 4 $na ($na[0]+"_"+($i+1)+"_Jnt") ;
	}//_if_sk_end

	if ($ct==1)
	{
		for($i=0; $i<size($osel); ++$i)
		{
		cCrv;
		rename ($na[0]+"_"+($i+1)+"_ctl");
		string $crsel[] = `ls-sl`;
		colorbtn;
		doGroup 0 1 1; rename ($na[0]+"_"+($i+1)+"_ctl_grp");
		string $grsel[] = `ls-sl`;
		parentConstraint ($na[0]+"_"+($i+1)+"_Jnt") $grsel ;
		DeleteConstraints;
		parentConstraint $crsel ($na[0]+"_"+($i+1)+"_Jnt");
		}//_$i_end
	}//_if_ctj_end
				
	if ($fk+$ct==2)
	{
		for($i=1; $i<(size($osel)*1); ++$i)
		{
		parent ($na[0]+"_"+($i+1)+"_ctl_grp") ($na[0]+"_"+($i*1)+"_ctl") ;
		}
	}//_if_fkj_end

}//_if_smj_on_end

}//--createJ_buton_end-----------


//___________CreateO_Button
global proc createO()
{
	//_Checbox_Work
	float $cto = `checkBox -q -v cto`;
	float $pto = `checkBox -q -v pto`;
	float $fko = `checkBox -q -v fko`;

	string $msel[] = `ls-sl`;
	if ($cto==1)
	{
	for($i=0; $i<size($msel); ++$i)
	{
		select $msel[$i];	
		cCrv;
		rename ($msel[$i]+"_ctl");
		string $crsel[] = `ls-sl`;
		colorbtn;
		doGroup 0 1 1; rename ($msel[$i]+"_ctl_grp");
		string $grsel[] = `ls-sl`;
		parentConstraint $msel[$i] $grsel ;
		DeleteConstraints;
		if ($pto==1)
		{
		parentConstraint $crsel $msel[$i] ;
		scaleConstraint $crsel $msel[$i] ;
		}//_if_pto_end
				
	}//_$i_end
	
	if ($fko==1)
	{
		for($i=0; $i<(size($msel)-1); ++$i)
		{
		parent ($msel[$i+1]+"_ctl_grp") ($msel[$i]+"_ctl") ;
		}
	}//_if_fko_end
	}//_$cto_end
}//--createO_buton_end----------

//__________Create_joint_Button
global proc loopJoint()
{
	string $sel[] = `ls-sl`;
	newCluster " -envelope 0";
	string $cls[] = `ls-sl`;
	select -cl; joint;
	string $jt[]=`ls-sl`;
	parentConstraint $cls $jt;
	delete $cls;
	select -r $sel;
	doBakeNonDefHistory( 1, {"prePost" });
}//--loopJoint_buton_end----------

//__________Create_ParentChain_Button
global proc parentChain()
{
	string $sel[] = `ls-sl`;
	for ($i=0;$i<(size($sel)-1);++$i)
	{
		parent $sel[$i] $sel[$i+1];
	}

}//--parentChain_buton_end----------

///_________________________THE___END_________

///_________________________Joint_________
global proc Joint()
{
PolySelectConvert 3;
string $CLS[]= `cluster` ;
float $val[]= `xform -q -rp -ws $CLS[1]`;
delete $CLS[1];
select -cl;
joint -p $val[0] $val[1] $val[2];
}
/////////////////////////////////////////////////////



