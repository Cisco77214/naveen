/*

qa_skinManagerUI.mel

Author: Quentin Auger
	 March 2006


Description:
	This script makes three different actions:
	- copies skin weights from one or several point(s) and pastes the average weight values to one or more skinned points.
	  The paste action can be in additive or replace mode.
	- updates one destination skinCluster (created if necessary) to match the influences list of a source bound object.
	- selects the influences objects of a selected smooth bound object.
	
Instructions:
	
	Run "qa_skinManagerUI;" to open the GUI.

	'Copy Weights' button:
		Select ONE or SEVERAL source points that you want to copy weights from and hit "Copy Weights".
		
	'Paste Weights' button:
		Select one or more skinned points that you want to paste weights to and hit "Paste Weights".
		
		Works with a multiple selection source of any control point type (CVs, vertices, lattices points, particles, subdiv.control points)
		(COPY)  => will only keep points from the first skinned object (any type) listed in the filterExpanded current selection,
		(PASTE) => will then average weights from those points before transfer. 
			
	!!! Destination object still needs to be bound to same joints than the source.
	!!! For that, you can use the two other functions:
		
	'Select Infl.' button:
		Select one smooth bound object that you want the influences to be selected, and hit "Select Infl."
		
	'Match Infl.' button:
		Select one source smooth bound object or skinCluster and a destination "skinnable" one (must have control points or particles)
		and press "Match Infl."

	OPTIONS:
	- Weights threshold: weights of influences below that value will be ignored by de "Copy Weights" function.
	- Add Weights : the "Paste Weights" (multiplied by the value after the "x" letter) will add the copied values to the actual weights of the destination points.
	- Replace Weights: the "Paste Weights" will first reset to zero the actual weights of the destination points before pasting copied values...
	- Normalize after paste : guess what ;) Weights are normalized after being pasted, in additive or replace mode.
	
*/


global string $qa_skinMgrCopyCmd; 


global proc qa_skinManagerUI() {
	
	string $win = "qa_skinManager_v00";
	
	// Reset the window:
	if(`window -q -ex $win`) 
		deleteUI $win;
	if (`windowPref -exists $win`)
		windowPref -r $win;
	
		// h 218
	window -wh 207 260 -s 1 -t "qa_skinManager" $win;
	columnLayout;
		rowColumnLayout -nc 2;
			button -w 90 -l "Copy Weights" -c ("qa_fromUIcopyWeights();");
			button -w 90 -l "Paste Weights" -c ("qa_fromUIpasteWeights();");

			button -w 90 -l "Select Inlf." -c "qa_selectInfluences";
			button -w 90 -l "Match Inlf." -c "qa_matchInfluences";
		setParent ..;

	frameLayout -label "Copy/Paste options" -w 200 -cll 1 -cl 0 -labelAlign "top" -borderStyle "in" ;
		columnLayout;
			floatFieldGrp -precision 4 -v1 0.001 -w 193 -label "Weights threshold" qa_skinMgrMinW;
			checkBox -label "Nomalize after Paste" -align "left" -v 1 qa_skinMgrNorm; 
			rowColumnLayout -nc 2;
				radioCollection qa_skinMgrPasteModes;
				radioButton -label "add Weights   x "  qa_skinMgrAddMode ;
				floatField -precision 3 -min 0.0 -v 1.0 qa_skinMgrAddModeMult;
 				radioButton -label "replace Weights" -sl qa_skinMgrReplaceMode;
				
 				setParent ..;
			
			setParent ..;
		setParent ..;

	frameLayout -label "Copy/Paste HotKeys" -w 200 -cll 1 -cl 0 -labelAlign "top" -borderStyle "in" ;
		columnLayout;
			rowColumnLayout -nc 5 -cw 1 35 -cw 2 25 -cw 3 50 -cw 4 50 -cw 5 35;
				text -label "Copy : " -w 10; 
					textField -text "C" -w 10 qa_skinMgrCpWtHk;
		
					checkBox -label "+ Alt" -align "left" -v 0 qa_skinMgrCpWtHkAltModif; 
						checkBox -label "+ Ctrl" -align "left" -v 1 qa_skinMgrCpWtHkCtrlModif; 
					button -align "center" -w 10 -l "Set.." -c (" qa_skinMgrSetCopyHotkeys();");
			

				text -label "Paste : "; 
					textField -text "V" -w 10 qa_skinMgrPstWtHk;
				checkBox -label "+ Alt" -align "left" -v 0 qa_skinMgrPstWtHkAltModif; 
					checkBox -label "+ Ctrl" -align "left" -v 1 qa_skinMgrPstWtHkCtrlModif; 
				button -align "center" -w 10 -l "Set.." -c (" qa_skinMgrSetPasteHotkeys();");
			
 				setParent ..;
			setParent ..;
			
		setParent ..;

	rowColumnLayout -nc 2;
		button -align "center" -w 100 -l "Help" -c ("qa_skinManagerShowHelpUI");
		button -align "center" -w 100 -l "Close" -c ("deleteUI "+$win+"; qa_skinManagerDeleteHelpUI;");
		setParent ..;

	showWindow $win;
}
// qa_skinManagerUI;


global proc float qa_skinMgrGetMinWeight() {
	float $minW[] = `floatFieldGrp -q -v qa_skinMgrMinW`;
	return $minW[0];
}
global proc string qa_skinMgrGetPasteMode() {
	string $mode = "additive";
	string $modeUI = `radioCollection -q -sl qa_skinMgrPasteModes`;
	if ($modeUI=="qa_skinMgrReplaceMode")
		$mode = "replace";
	return $mode;
}
global proc float qa_skinMgrGetAddPasteMult() {
	float $addMult = `floatField -q -v qa_skinMgrAddModeMult `;
	return $addMult ;
}

global proc int qa_skinMgrGetNormalizeAfter() {
	int $norm = `checkBox -q -v qa_skinMgrNorm`;
	return $norm ;
}


global proc string[] qa_skinMgrGetCopyWgtHotKeyOptions() {

	string $cpHK = `textField -q -tx qa_skinMgrCpWtHk`;
	int $alt = `checkBox -q -v qa_skinMgrCpWtHkAltModif`;
	int $ctl = `checkBox -q -v qa_skinMgrCpWtHkCtrlModif`;
	
	return { $cpHK , $alt, $ctl };
}
global proc string[] qa_skinMgrGetPasteWgtHotKeyOptions() {

	string $pHK = `textField -q -tx qa_skinMgrPstWtHk`;
	int $alt = `checkBox -q -v qa_skinMgrPstWtHkAltModif`;
	int $ctl = `checkBox -q -v qa_skinMgrPstWtHkCtrlModif`;
	
	return { $pHK , $alt, $ctl };
}




// ------------------------------------------------------------------------------------------------------------------------------
// --------- hotKEYs management:
//------------------------------------------------------


global proc qa_skinMgrSetCopyHotkeys() 
{
	int $autoSave = true;
	string $cpHKvals[] = qa_skinMgrGetCopyWgtHotKeyOptions();
	
	string $keyShortCut = "c";
	if (size($cpHKvals[0])==1)
		$keyShortCut = $cpHKvals[0];
	int $altBool =  $cpHKvals[1];
	int $ctlBool =  $cpHKvals[2];

	// Check if that Key is safe and ask to use if not:
	int $letsSet = qa_checkHotkeysWithConfirm( $keyShortCut, $altBool, $ctlBool ) ;

	if ($letsSet) {
		string $copyAnnotation = "\"qa_skinManagerUI's Copy Weights\"";
		string $copyNameCommand = "qa_skinManagerUICopyWeights";
		string $copyCommand = "\"qa_fromUIcopyWeights()\"";

		qa_setHotkeys( $copyAnnotation, $copyNameCommand, $keyShortCut, $altBool, $ctlBool, $autoSave, $copyCommand ) ;
	}
}

global proc qa_skinMgrSetPasteHotkeys() 
{
	int $autoSave = true;
	string $pHKvals[] = qa_skinMgrGetPasteWgtHotKeyOptions();

	string $keyShortCut = "v";
	if (size($pHKvals[0])==1)
		$keyShortCut = $pHKvals[0];
	int $altBool =  $pHKvals[1];
	int $ctlBool =  $pHKvals[2];

	// Check if that Key is safe and ask to use if not:
	int $letsSet = qa_checkHotkeysWithConfirm( $keyShortCut, $altBool, $ctlBool ) ;

	if ($letsSet) {
		string $pasteAnnotation = "\"qa_skinManagerUI's Paste Weights\"";
		string $pasteNameCommand = "qa_skinManagerUIPasteWeights";
		string $pasteCommand = "\"qa_fromUIpasteWeights()\"";

		qa_setHotkeys( $pasteAnnotation , $pasteNameCommand, $keyShortCut, $altBool, $ctlBool, $autoSave, $pasteCommand ) ;
	}
}


global proc qa_setHotkeys( string $annotation, string $nameCommand, string $keyShortCut, int $altBool, int $ctlBool, int $autoSave, string $command ) 
{
	string $alt = "-alt";
	if ($altBool==0)
		$alt = "";
	string $ctl = "-ctl";
	if ($ctlBool==0)
		$ctl = "";

	eval ("nameCommand -ann "+$annotation+" -c "+$command+" "+$nameCommand+";\n");
	eval ("hotkey -keyShortcut "+$keyShortCut+" "+$alt+" "+$ctl+" -name "+$nameCommand+";");
	// hotkey -as 1;  // to auto-save hotkeys when you quit.
}

// Check if that Key is safe and ask to use if not:
//
global proc int qa_checkHotkeysWithConfirm( string $keyShortCut, int $altBool, int $ctlBool ) 
{
	int $ok = true;
	string $alreadySet = qa_checkHotkeys( $keyShortCut, $altBool, $ctlBool ) ;

	if (size($alreadySet)) {
	
		string $alt = " +Alt ";
		if ($altBool==0) $alt = "";
		string $ctl = " +Ctrl ";
		if ($ctlBool==0) $ctl = "";
		string $message = ( "\""+$keyShortCut+"\""+$alt+$ctl+" is already assigned to  \n" 
				  + "\""+$alreadySet+"\".\n"
				  + " Still want to Set it ? ");

		string $res = `confirmDialog -title "Oops!!!" -message $message
				-button "Yes" -button "No!" -defaultButton "No!"
				-cancelButton "No" -dismissString "Nothing" `;

		if ($res != "Yes")
			$ok = false;
	}
	return $ok;
}
	
global proc string qa_checkHotkeys( string $keyShortCut, int $altBool, int $ctlBool ) 
{
	string $alt = "-alt";
	if ($altBool==0)
		$alt = "";
	string $ctl = "-ctl";
	if ($ctlBool==0)
		$ctl = "";
	string $res = eval ("hotkeyCheck -k "+$keyShortCut+" "+ $alt+" "+ $ctl );	
	return $res;
}


//------------------ end of hotKEYS management
// ------------------------------------------------------------------------------------------------------------------------------



// -----------------   HELP --------------------------------------------------//
//
global proc qa_skinManagerShowHelpUI() {
	string $helpWin = "qa_skinManagerShowHelpUI";
	qa_skinManagerDeleteHelpUI() ;

	string $titleText = "        >>>>>>    qa_skinManagerUI - Help    <<<<<< ";

	string $copyPasteText = "\n"
	+ "- \"Copy Weights\" :\n   Select one or several points you want to copy weights from\n"
	+ "   and hit that button.\n\n"

	+ "- \"Paste Weights\" : Select points you want to copy \n"
	+ "   weights into and hit 'Paste..'\n\n"

	+ "> ACHTUNG!\n"
	+ "> Destination object needs to be bound to SAME influences\n"
	+ "> than the source !!!!   (Use following functions for that...) \n";

	string $inflFnText = "\n"
	+ "- \"Select Infl.\" :\n   Select one smooth bound object that you want\n"
	+ "   its influences to be selected, and hit that button.\n\n"

	+ "- \"Match Infl.\" :\n  Select one source smooth bound object or skinCluster\n"
	+ "  and a destination one (must have control points or particles)\n"
	+ "  and hit 'Match Infl.'\n";

	string $optionText = ("\n"
	+ "> Copy/Paste Weights options:\n\n" 
	+ " . \"Weights threshold\" value : influences less weighted than\n"
	+ "    that value will be disgarded by the COPY function.\n\n"

	+ " . \"replace Weights\" option :\n    Will reset to zero current weights of destination points\n"
	+ "    before pasting copied values.\n\n"

	+ " . \"add Weights\" option :\n    Copied weights are multiplied by the value close\n"
	+ "    to the \" x \" field, and then added to actual weights of \n"
	+ "    of the destination points.\n\n" 

	+ "> Copy/Paste HotKeys:\n" 
	+ " . \"Set..\" buttons will test if the key is already assigned\n"
	+ "    and prompt user to confirm...\n" );



	window -wh 300 620 -s 0 -t "qa_skinManagerHelp" $helpWin ;
 	columnLayout -adjustableColumn 0;
		text -label $titleText -align "right";
		separator -w 300;separator -w 300;
 		text -label $copyPasteText -align "left";
		separator -w 300;
 		text -label $inflFnText -align "left";
		separator -w 300;
		text -label $optionText -align "left";
		separator -w 300;

	button -w 292 -l "Close Help" -c ("qa_skinManagerDeleteHelpUI;");
 	showWindow;
}
// end of proc qa_skinManagerShowHelpUI()

global proc qa_skinManagerDeleteHelpUI() {
	string $helpWin = "qa_skinManagerShowHelpUI";
	if(`window -q -ex $helpWin `) {
		deleteUI $helpWin ;
		if (`windowPref -exists $helpWin `);
			windowPref -r $helpWin ;
	}
}


// ------------------------------------------------------------------------------------------------------------------------------
//
// functionnal procs:
//
// ------------------------------------------------------------------------------------------------------------------------------

global proc qa_fromUIcopyWeights() {
	float $min= qa_skinMgrGetMinWeight(); 
	qa_copyWeights($min);
}

global proc qa_fromUIpasteWeights() {
	string $pm = qa_skinMgrGetPasteMode(); 
	float $addMult = qa_skinMgrGetAddPasteMult(); 
	int $nrm = qa_skinMgrGetNormalizeAfter(); 
	qa_pasteWeights($pm,$nrm,$addMult);
}



// -- qa_filterSkinnedPoints()
//
// Will return stringArray={ name , skinClusterName } of the first skinned object in the list of points 
// (can be a mesh, NURBS, subdiv, lattice or particles).
// and changes the incomming stringArray[] to get rid of not associated points.
//
global proc string[] qa_filterSkinnedPoints( string $points[] ) 
{
	string $obj = "";
	string $skinCluster = "";
	string $keptPoints[] = {};
	
	for ($pt in $points) {
		string $rootName = `match "^[^\.]*" $pt`;
		
		// si on a toujours pas trouve un obj skinned et que le voila ! on le garde:
		string $tmpSkinCl = findRelatedSkinCluster($rootName) ;
		if ( ($obj == "") && (size($tmpSkinCl))  ) {
					 $keptPoints[size($keptPoints)] = $pt ;
					 $obj = $rootName ;
					 $skinCluster = $tmpSkinCl ;
					 print ("\n* Let's work with that source object \""+$obj+"\", whose skinCluster is \""+$skinCluster+"\":\n");
		}
		// si on a toujours pas trouve un obj skinned et que le voila ! on le vire de la liste:
		else if ( ($obj =="") && ( size($tmpSkinCl)  == 0) ) {
			print ("- skip point "+$pt+" - not owned by a skinned object!");
		}
		// si notre obj est trouve et que ce point en fait partie, on le garde:
		else if ( (size($obj)) && ($rootName == $obj) ) {
			 $keptPoints[size($keptPoints)] = $pt;
		}
		// si notre obj est trouve et que ce point n'en fait PAS partie, on le skip:
		else if ( (size($obj)) && ($rootName != $obj) ) {
			print ("- skip point "+$pt+" - not owned by first found skinned object!");
		}
	}
	$points = $keptPoints;
	return { $obj , $skinCluster } ;
}
// end of proc qa_filterSourcePoints( string $points[] ) 


global proc int qa_copyWeights( float $minWeight)
{
	global string $qa_skinMgrCopyCmd; 
	string $skinCluster = "";
	string $sourceObj = "";
	string $jointList[] = {};
	float $weightList[] = {};
	float $normalizedWeights[] = {};
	
	print ("\n\n>> qa_copyWeights( minimum = "+$minWeight+") :\n");
	
	string $sel[] = `ls -sl`;
	string $points[] = `filterExpand -sm 31 -sm 28 -sm 36 -sm 47 -sm 46 $sel`;
	/*
		string $vtcs[] = `filterExpand -sm 31 $sel`;
		string $CVs[] = `filterExpand -sm 28  $sel`;
		string $subdivPts[] = `filterExpand -sm 36 $sel`;
		string $lattPts[] = `filterExpand -sm 46 $sel`;
		string $particles[] = `filterExpand -sm 47 $sel`;
	*/
	
	string $result[] = qa_filterSkinnedPoints( $points ) ;
	if ( (size($result[0])) &&  (size($result[1])) ) {
		$sourceObj = $result[0];
		$skinCluster = $result[1];
	}
	else
		error "No skinning could be found in selected points!";
	
	
	int $skinnedPoints = 0;
	for ( $current_point in $points ) {
		string $currentGroup = "";
		string $source_pointJoints[] = {};
		float $source_pointJointWeights[] = {} ;	// string $current_point = $sel[0];

		print ("\n- \""+$current_point+"\" skin-bound to : \n");

		$source_pointJoints = `skinPercent -ib $minWeight -q -t $skinCluster $current_point `;
		if (size($source_pointJoints)==0) {
			print ("-> \""+$current_point+"\" : no appropriate influence (weight>0.001) found for that point... Skipped. \n");
			continue;
		}
		$skinnedPoints ++;

		int $l = 0;
		for ($l = 0 ; $l < size($source_pointJoints) ; $l++) {
			string $current_joint = $source_pointJoints[$l];
			$source_pointJointWeights[$l] = `skinPercent -t $current_joint -q  $skinCluster $current_point` ;
			print ("  ."+$source_pointJoints[$l]+" : "+$source_pointJointWeights[$l]+"\n");

			// Updates joints/weights lists:
			int $allreadyInlist = qa_firstStringIndexInArray( $current_joint, $jointList);
			if ($allreadyInlist == -1)
			{
				int $freeIndex = size($jointList);
				qa_stringArrayAppendNoDuplicate ($jointList, $current_joint);
				$weightList[$freeIndex] = $source_pointJointWeights[$l];
			}
			else
				$weightList[$allreadyInlist] = $weightList[$allreadyInlist] + $source_pointJointWeights[$l];			
		}
	}
		
	// Normalizing weights:
	if ($skinnedPoints > 0)
		for ($j = 0 ; $j < size($jointList) ; $j++)
			$normalizedWeights[$j] = $weightList[$j] / $skinnedPoints;
	else {
		warning "No skinned points could be treated ! - see Script Editor for details...";
		return 0;
	}
	
	// Command Creation:
	string $cmd = "skinPercent";
	
	int $size = `size($jointList)`;	
	for($i = 0;$i<$size;$i++) 
		$cmd += (" -tv " + $jointList[$i] + " " + $normalizedWeights[$i]);
		
	
	$qa_skinMgrCopyCmd = $cmd;
	print ("\n-> After averaging those weights, the stocked command is: \n");
	print  (" \" "+$qa_skinMgrCopyCmd+" \"\n");
	
	return $skinnedPoints;
		
}
// end of proc qa_copyWeights()


/*
 string $pasteMode = "additive";
 int $normalizeAfterPaste = 1;
 float $addMult = 0.5;


*/
global proc qa_pasteWeights( string $pasteMode , int $normalizeAfterPaste , float $addMult)
{
	global string $qa_skinMgrCopyCmd;
	string $pasteCommand = "skinPercent";
	
	string $cmd = "";
	string $destObj = "";
	string $skinCluster = "";
	
	if ($pasteMode=="replace") 
		// In this case, assuming that the addMult value is neutral i.e = 1.0
		$addMult = 1.0;
	print ("\n\n>> qa_pasteWeights( \""+$pasteMode+"\" mode, mult = "+$addMult+", NormalizeAfterPaste = "+ $normalizeAfterPaste +") :\n");

	string $sel[] = `ls -sl -fl`;
	string $points[] = `filterExpand -sm 31 -sm 28 -sm 36 -sm 47 -sm 46 $sel`;
	string $result[] = qa_filterSkinnedPoints( $points ) ;
	if ( (size($result[0])) &&  (size($result[1])) ) {
		$destObj = $result[0];
		$skinCluster = $result[1];
	}
	else
		error "No skinning could be found in selected points!";

	// Disable weight normalisation
	setAttr ($skinCluster + ".normalizeWeights") 0;
	
	
	// Pre-parsing stored command in case of additive and $addMult != 1.0 (neutral) and > 0.0:
	//
	if ( ($pasteMode=="additive") && ($addMult != 1.0) && ($addMult > 0.0) ) {
	
		string $tmpArray[] = stringToStringArray($qa_skinMgrCopyCmd, " ");

		for ($jw=1; $jw<size($tmpArray); $jw+=3) {
			//print ("\n"+$tmpArray[$jw]+" "+ $tmpArray[$jw+1]+" "+ $tmpArray[$jw+2]+"\n");
			float $multWeight =  $tmpArray[$jw+2] ;
   			float $multWeight = $multWeight*$addMult;
			$pasteCommand += (" -tv " + $tmpArray[$jw+1] + " " + $multWeight);
		}
	}
	else if ( ($pasteMode=="additive") && ($addMult < 0.0) )
		error ("The multipicative value for the additive Paste mode is NEGATIVE !...");
	else
		$pasteCommand = $qa_skinMgrCopyCmd;
					

	// First store actual bound influences and Hold states of that skinCluster, and set them to OFF:
	string $destJoints[] = `skinCluster -q -inf $skinCluster `;		
	int $destJointsHolds[] = {};
	for ($j=0; $j<size($destJoints); $j++) {
		$destJointsHolds[$j] = `getAttr ($destJoints[$j]+".liw")`;
		catch(`setAttr ($destJoints[$j]+".liw") 0`);
	}
	
	for($pt in $points) {

			// If pasteMode = "replace" : must set every current weight to zero first:
			//
			if ($pasteMode=="replace") {
				// In this case, assuming that the addMult value is neutral i.e = 1.0
				$addMult = 1.0;
				string $pointJoints[] = `skinPercent -ib 0.0001 -q -t $skinCluster $pt`;	
				string $resetWeightsCmd = "skinPercent";
				for ($j=0; $j<size($pointJoints); $j++) 
					$resetWeightsCmd += (" -tv "+$pointJoints[$j]+" 0.0");
				$resetWeightsCmd += (" "+$skinCluster+" "+$pt);
				eval($resetWeightsCmd);
				print (" - "+$pt+"'s infl.weights reset to zero first.\n");
			}
		
			// Then set to the copied weights:
			$cmd = $pasteCommand;
			$cmd = ($cmd + " " + $skinCluster + " " + $pt);
			print "-> ";	evalEcho($cmd);
	}	
		
	// Re-Enable weight normalisation
	if ($normalizeAfterPaste) {
		setAttr ($skinCluster + ".normalizeWeights") 1;
		skinPercent -normalize true $skinCluster;
	}
	// Reseting Hold states to previous values:
	for ($j=0; $j<size($destJoints); $j++) 
		catch(`setAttr ($destJoints[$j]+".liw") $destJointsHolds[$j]`);
	
}
// end of proc qa_pasteWeights()


global proc int qa_isStringInArray( string $theString, string $theArray[] ) {
	string $s;
	for ($s in $theArray)
		if( $s == $theString )
			return 1;
	return 0;
}


global proc int qa_stringArrayAppendNoDuplicate (string $theArray[], string $theString) {
	int $success = false;
	if (!qa_isStringInArray( $theString, $theArray )) {
		$theArray[size($theArray)] = $theString;
		$success = true;
	}
	return $success;
}

global proc int qa_firstStringIndexInArray( string $theString, string $theArray[] ) {
  	int $i = 0;
	for ($i=0; $i<size($theArray); $i++)
		if ($theString == $theArray[$i])
			return $i;
	return -1;
}



//	qa_matchInfluences()
//	---------------------------------------------------------------
//
//  Author :    Quentin Auger
//  Creation :  March 2006
//
//
// Synopsis:
//	Select one source smooth-bound object or a skinCluster, then one destination object (skinned or not)
//	Launch "qa_matchInfluences() ;"
//
//
// Return Value:
//	None
//
//
// Description:
//
//	The skinCluster of the second object will be updated or created to match the list of influences of the source one.
//	No skinWeighting will be done ! It is only an update of the influences list. (if added, locked to zero weight)//
//
//
/////////////////////////////////////////////////////////////////////////
//

global proc qa_matchInfluences ()
{
	string $skinClusterTreatment = "" ;
	int $verbose = true;
	print "\n>>> \"qa_matchInfluences()\" <<<\n";
	print   "-------------------------------\n\n";
	
	string $sel[] = `ls -sl`;
	if ( size($sel) == 2 )
		$skinClusterTreatment = qa_doUpdateListOfInfluences ( $sel[0] , $sel[1], $verbose) ;
	else 
		error "Please select 2 objects, first one must be a skinCluster or a smooth bound object, the 2nd one a 'skinable' object.";
		
	if ($skinClusterTreatment == "FAILED")
		error ("Problems occured while matching Source and Destination objects'influences lists - See Script Editor for details...");
	else
		print "\n>> Matching Source and Destination objects skin influences COMPLETE. :-)\n\n" ;
		print ("Influences list of \""+$sel[1]+"\"s skinCluster was "+$skinClusterTreatment+" according to \""+$sel[0]+"\"s one. :-)\n") ;
}



global proc string qa_doUpdateListOfInfluences (string $srcObj , string $destObj , int $verbose) 
{
	int $success = false;
	string $skinClusterTreatment = "FAILED";
	
	string $srcSkinCluster = "";
	string $source_infl_list[] = {};
	
	int $validDestObj = false ;
	string $destSkinCluster = "";
	string $dest_infl_list[] = {};

	if ( size($srcObj) &&  size($destObj) ) {
		if (`objectType $srcObj`=="skinCluster") 
			$srcSkinCluster = $srcObj ;
		else
			$srcSkinCluster = findRelatedSkinCluster($srcObj) ;
	}
	 
	if (size($srcSkinCluster)) {
		$source_infl_list = `skinCluster -q -inf $srcObj `;

		if ($verbose) {
			print ("- Source Object: \""+$srcObj +"\"  -->>  Destination Object: \""+$destObj +"\"\n");
			print ("\n* "+size($source_infl_list)+" influences for source object's skinCluster \""+$srcSkinCluster+"\".\n\n");
		}
		
		$destSkinCluster = findRelatedSkinCluster($destObj) ;
		if ( size($destSkinCluster) == 0 )
			$validDestObj = `objExists ($destObj+".cp")`;
		else
			$validDestObj = true;
	}
	else {
		warning "The 1rst object is NOT a skinCluster, neither a smooth bound object...";
		return $skinClusterTreatment;
	}
	
	

	// Do default skinning if none on the target object :
	//
	if ( ( size($destSkinCluster) == 0) && ($validDestObj) )	{
		if ($verbose) print "* Destination object was NOT skinned : binding it according to source skeleton...\n";
		string $tempDestSkClArray[] = {};
		
		//-----------
		$source_infl_list = stringArrayRemoveDuplicates($source_infl_list);
		
		// Separating pure Joints (directly skinnable) and other influences (shapes, transforms..)
		// which gonna be bound afterwards:
		string $inflToAddAfterwards[] = qa_keepThatTypeInArray ( $source_infl_list , "joint" ); // that proc "cleans" the input stringArray and returns the rejected strings.
		
		print ("\t- First let's bind to "+size($source_infl_list)+" pure joints ("+size($inflToAddAfterwards)+" other infl. later):\n");
		if ($verbose) { print "\t  Those ones:\n\n"; print $source_infl_list; print "\n";}

		$success = !catch ($tempDestSkClArray= `skinCluster -tsb $source_infl_list $destObj`) ;
		if ( ($success) && (size($inflToAddAfterwards)) ) {
			print ("\t.... first pass done.\n\n");
			print ("\t- Then let's add "+size($inflToAddAfterwards)+" non-joint-typed influences into skinCluster \""+$tempDestSkClArray[0]+"\" (without 'Use Geometry' option): \n");

			int $localSuccess = true;
			for ( $i = 0 ; $i < size($inflToAddAfterwards) ; $i++ ) {
				$localSuccess *= !catch(`skinCluster -e -dr 10 -ps 50 -ns 100 -lw true -wt 0 -ai $inflToAddAfterwards[$i] $tempDestSkClArray[0]`);
				if ( ($verbose) && ($localSuccess))
					print ("\t  . \""+$inflToAddAfterwards[$i]+"\" added.\n") ;
			}
			if ($localSuccess==false)
				warning ("Could NOT add wanted influences to skinCluster \""+$tempDestSkClArray[0]+"\"...");
			$success = $localSuccess;
		}else if ($success==false){
			warning ("Could NOT bind \""+$destObj+"\!");
		}
		if ($success) {
			$destSkinCluster = $tempDestSkClArray[0] ;
			$skinClusterTreatment = "CREATED" ;
			print "\n\t...last pass done.\n" ;
		}
	}
	
	// If some source influences are missing to actual skinCluster :
	//
	else if ( (size($destSkinCluster)) && ($validDestObj)  ) {
		$dest_infl_list = `skinCluster -q -influence $destSkinCluster`;	
		$dest_infl_list = stringArrayRemoveDuplicates($dest_infl_list) ;
		string $missingInfl[] = stringArrayRemove($dest_infl_list , $source_infl_list);

		print ("* "+size($missingInfl)+" missing influences in the destination skinCluster \""+$destSkinCluster+"\" compared to the source one.\n") ;

		if ( size($missingInfl) ) {
			if ($verbose) 
				print ("\t- Updating destination skinCluster \""+$destSkinCluster+"\" (without 'Use Geometry' option) :    \n") ;
				
			int $localSuccess = true;
			for ( $miss = 0 ; $miss < size($missingInfl) ; $miss++ ) {
				$localSuccess *= !catch(`skinCluster -e -dr 10 -ps 50 -ns 100 -lw true -wt 0 -ai $missingInfl[$miss] $destSkinCluster`);
				if ( ($verbose) && ($localSuccess))
					print ("\t  . \""+$missingInfl[$miss]+"\" added.\n") ;
				
			}
			if ($localSuccess == false)
				warning ("  - Cannot update the destination skinCluster '"+$destSkinCluster+"' !") ;
			else {
				$success = true;
				$skinClusterTreatment = "UPDATED" ;
				print "\n\t...adding influences done.\n" ;
			}
		}
		else {
			print ("Source and Destination influences are already matching !\n");
			$success = true;
			$skinClusterTreatment = "ALREADY OK";
		}
	}
	else if ($validDestObj == false)
		warning "The 2nd object is NOT skinnable...";
		
	return $skinClusterTreatment ;
}
// end of proc qa_doUpdateListOfInfluences()



global proc string[] qa_keepThatTypeInArray ( string $srcArray[] , string $typeToKeep )
{
	string $rejectedObj[];
	if ($typeToKeep == "") error ($typeToKeep+" is NOT a valid type!");
	string $cleanerArray[] = $srcArray;
	for ($obj in $srcArray) {
		if (`nodeType $obj`!= $typeToKeep) {
			$rejectedObj[size($rejectedObj)] = $obj;
			$cleanerArray = stringArrayRemove( {$obj}, $cleanerArray) ;
			}
	}
	$srcArray = $cleanerArray ;
	return $rejectedObj;
}



// ----------------------  qa_selectInfluences() :
//
global proc qa_selectInfluences()
{
	string $sel[] = `ls -sl`;

	string $skcl = "";
	if ( size($sel) == 1 ) {
		if (`objectType $sel[0]`=="skinCluster") 
			$skcl = $sel[0];
		else
			$skcl = findRelatedSkinCluster($sel[0]) ;
	}

	if (size($skcl)) {
		string $infl[] = `skinCluster -q -inf $sel[0]`;
		print ("\n>>> qa_selectInfluences() : on object \""+$sel[0]+"\", skinCluster \""+$skcl+"\" : \n\n");
		print $infl;
		select -r $infl;
		print "\n";
		print (">> Influences of  \""+$skcl+"\"  listed above are selected (see script Editor...)");
	}
	else 
		error "Please select a skinCluster or a smooth bound object...";
}

qa_skinManagerUI;
